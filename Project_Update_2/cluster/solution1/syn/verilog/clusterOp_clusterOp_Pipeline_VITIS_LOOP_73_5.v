// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module clusterOp_clusterOp_Pipeline_VITIS_LOOP_73_5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        out_clusters_TREADY,
        clusters_num_points_load,
        phi_mul,
        clusters_points_address0,
        clusters_points_ce0,
        clusters_points_q0,
        sub88,
        cmp91,
        out_clusters_TDATA,
        out_clusters_TVALID,
        out_clusters_TKEEP,
        out_clusters_TSTRB,
        out_clusters_TUSER,
        out_clusters_TLAST,
        out_clusters_TID,
        out_clusters_TDEST
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   out_clusters_TREADY;
input  [31:0] clusters_num_points_load;
input  [12:0] phi_mul;
output  [12:0] clusters_points_address0;
output   clusters_points_ce0;
input  [31:0] clusters_points_q0;
input  [31:0] sub88;
input  [0:0] cmp91;
output  [31:0] out_clusters_TDATA;
output   out_clusters_TVALID;
output  [3:0] out_clusters_TKEEP;
output  [3:0] out_clusters_TSTRB;
output  [1:0] out_clusters_TUSER;
output  [0:0] out_clusters_TLAST;
output  [4:0] out_clusters_TID;
output  [5:0] out_clusters_TDEST;

reg ap_idle;
reg clusters_points_ce0;
reg out_clusters_TVALID;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln73_fu_146_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    out_clusters_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] cluster_axis_last_V_fu_179_p2;
reg   [0:0] cluster_axis_last_V_reg_205;
wire   [63:0] zext_ln75_fu_168_p1;
reg   [31:0] j_fu_66;
wire   [31:0] add_ln73_fu_152_p2;
wire    ap_loop_init;
reg   [31:0] ap_sig_allocacmp_j_1;
reg    ap_block_pp0_stage0_01001;
wire   [12:0] trunc_ln75_fu_158_p1;
wire   [12:0] add_ln75_fu_162_p2;
wire   [0:0] icmp_ln77_fu_173_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

clusterOp_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln73_fu_146_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_66 <= add_ln73_fu_152_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_66 <= 32'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln73_fu_146_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cluster_axis_last_V_reg_205 <= cluster_axis_last_V_fu_179_p2;
    end
end

always @ (*) begin
    if (((icmp_ln73_fu_146_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_1 = 32'd0;
    end else begin
        ap_sig_allocacmp_j_1 = j_fu_66;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        clusters_points_ce0 = 1'b1;
    end else begin
        clusters_points_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_clusters_TDATA_blk_n = out_clusters_TREADY;
    end else begin
        out_clusters_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_clusters_TVALID = 1'b1;
    end else begin
        out_clusters_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln73_fu_152_p2 = (ap_sig_allocacmp_j_1 + 32'd1);

assign add_ln75_fu_162_p2 = (phi_mul + trunc_ln75_fu_158_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((out_clusters_TREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((out_clusters_TREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((out_clusters_TREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (out_clusters_TREADY == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign cluster_axis_last_V_fu_179_p2 = (icmp_ln77_fu_173_p2 & cmp91);

assign clusters_points_address0 = zext_ln75_fu_168_p1;

assign icmp_ln73_fu_146_p2 = ((ap_sig_allocacmp_j_1 == clusters_num_points_load) ? 1'b1 : 1'b0);

assign icmp_ln77_fu_173_p2 = ((ap_sig_allocacmp_j_1 == sub88) ? 1'b1 : 1'b0);

assign out_clusters_TDATA = clusters_points_q0;

assign out_clusters_TDEST = 6'd0;

assign out_clusters_TID = 5'd0;

assign out_clusters_TKEEP = 4'd1;

assign out_clusters_TLAST = cluster_axis_last_V_reg_205;

assign out_clusters_TSTRB = 4'd0;

assign out_clusters_TUSER = 2'd0;

assign trunc_ln75_fu_158_p1 = ap_sig_allocacmp_j_1[12:0];

assign zext_ln75_fu_168_p1 = add_ln75_fu_162_p2;

endmodule //clusterOp_clusterOp_Pipeline_VITIS_LOOP_73_5
