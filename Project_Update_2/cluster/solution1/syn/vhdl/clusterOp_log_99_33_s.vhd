-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity clusterOp_log_99_33_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x : IN STD_LOGIC_VECTOR (98 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (71 downto 0) );
end;


architecture behav of clusterOp_log_99_33_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (50 downto 0) := "000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (50 downto 0) := "000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (50 downto 0) := "000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (50 downto 0) := "000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (50 downto 0) := "000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (50 downto 0) := "000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (50 downto 0) := "000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (50 downto 0) := "000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (50 downto 0) := "000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (50 downto 0) := "001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (50 downto 0) := "010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (50 downto 0) := "100000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv82_162E42FEFA39EF35793C7 : STD_LOGIC_VECTOR (81 downto 0) := "0101100010111001000010111111101111101000111001111011110011010101111001001111000111";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv72_0 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv7_20 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_const_lv99_1 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv107_0 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv109_1800000000000000000000000000 : STD_LOGIC_VECTOR (108 downto 0) := "1100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv7_7F : STD_LOGIC_VECTOR (6 downto 0) := "1111111";
    constant ap_const_lv109_1 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_6C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101100";
    constant ap_const_lv32_6A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101010";
    constant ap_const_lv32_6B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101011";
    constant ap_const_lv88_2C5C85FDF473DE6AF278E : STD_LOGIC_VECTOR (87 downto 0) := "0000001011000101110010000101111111011111010001110011110111100110101011110010011110001110";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_66 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100110";
    constant ap_const_lv32_6D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101101";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_69 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv13_1000 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv18_20000 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_lv34_0 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv23_400000 : STD_LOGIC_VECTOR (22 downto 0) := "10000000000000000000000";
    constant ap_const_lv44_0 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_62 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100010";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv30_0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    constant ap_const_lv16_8000 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal log_apfixed_reduce_log_inverse_lut_table_array_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal log_apfixed_reduce_log_inverse_lut_table_array_V_ce0 : STD_LOGIC;
    signal log_apfixed_reduce_log_inverse_lut_table_array_V_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal log_apfixed_reduce_log0_lut_table_ap_fixed_0_5_64_array_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal log_apfixed_reduce_log0_lut_table_ap_fixed_0_5_64_array_V_ce0 : STD_LOGIC;
    signal log_apfixed_reduce_log0_lut_table_ap_fixed_0_5_64_array_V_q0 : STD_LOGIC_VECTOR (81 downto 0);
    signal log_apfixed_reduce_log_lut_table_ap_fixed_4_4_16_array_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal log_apfixed_reduce_log_lut_table_ap_fixed_4_4_16_array_V_ce0 : STD_LOGIC;
    signal log_apfixed_reduce_log_lut_table_ap_fixed_4_4_16_array_V_q0 : STD_LOGIC_VECTOR (77 downto 0);
    signal log_apfixed_reduce_log_lut_table_ap_fixed_7_6_64_array_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal log_apfixed_reduce_log_lut_table_ap_fixed_7_6_64_array_V_ce0 : STD_LOGIC;
    signal log_apfixed_reduce_log_lut_table_ap_fixed_7_6_64_array_V_q0 : STD_LOGIC_VECTOR (74 downto 0);
    signal log_apfixed_reduce_log_lut_table_ap_fixed_12_6_64_array_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal log_apfixed_reduce_log_lut_table_ap_fixed_12_6_64_array_V_ce0 : STD_LOGIC;
    signal log_apfixed_reduce_log_lut_table_ap_fixed_12_6_64_array_V_q0 : STD_LOGIC_VECTOR (69 downto 0);
    signal log_apfixed_reduce_log_lut_table_ap_fixed_17_6_64_array_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal log_apfixed_reduce_log_lut_table_ap_fixed_17_6_64_array_V_ce0 : STD_LOGIC;
    signal log_apfixed_reduce_log_lut_table_ap_fixed_17_6_64_array_V_q0 : STD_LOGIC_VECTOR (64 downto 0);
    signal log_apfixed_reduce_log_lut_table_ap_fixed_22_6_64_array_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal log_apfixed_reduce_log_lut_table_ap_fixed_22_6_64_array_V_ce0 : STD_LOGIC;
    signal log_apfixed_reduce_log_lut_table_ap_fixed_22_6_64_array_V_q0 : STD_LOGIC_VECTOR (59 downto 0);
    signal icmp_ln1652_fu_413_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1652_reg_1305 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_100_fu_423_p4 : STD_LOGIC_VECTOR (109 downto 0);
    signal icmp_ln731_fu_459_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln731_reg_1314 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_exp_V_3_fu_478_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal b_exp_V_3_reg_1332 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal p_Val2_34_reg_1338 : STD_LOGIC_VECTOR (108 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal r_V_13_fu_487_p3 : STD_LOGIC_VECTOR (109 downto 0);
    signal r_V_13_reg_1343 : STD_LOGIC_VECTOR (109 downto 0);
    signal p_Result_s_fu_501_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_1349 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln731_fu_547_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1_reg_1361 : STD_LOGIC_VECTOR (81 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal zext_ln541_fu_604_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln541_reg_1367 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal b_frac_tilde_inverse_V_reg_1377 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal a_V_reg_1387 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_30_reg_1393 : STD_LOGIC_VECTOR (80 downto 0);
    signal tmp_38_reg_1399 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_reg_1404 : STD_LOGIC_VECTOR (79 downto 0);
    signal tmp_33_reg_1409 : STD_LOGIC_VECTOR (76 downto 0);
    signal select_ln1488_fu_684_p3 : STD_LOGIC_VECTOR (85 downto 0);
    signal select_ln1488_reg_1414 : STD_LOGIC_VECTOR (85 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_fu_697_p2 : STD_LOGIC_VECTOR (84 downto 0);
    signal r_V_14_reg_1429 : STD_LOGIC_VECTOR (84 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal tmp_34_reg_1434 : STD_LOGIC_VECTOR (74 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal tmp_35_reg_1440 : STD_LOGIC_VECTOR (68 downto 0);
    signal tmp_36_reg_1445 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal grp_fu_764_p2 : STD_LOGIC_VECTOR (80 downto 0);
    signal r_V_15_reg_1461 : STD_LOGIC_VECTOR (80 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal tmp_37_reg_1466 : STD_LOGIC_VECTOR (69 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal tmp_39_reg_1472 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_40_reg_1477 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal grp_fu_851_p2 : STD_LOGIC_VECTOR (75 downto 0);
    signal r_V_16_reg_1493 : STD_LOGIC_VECTOR (75 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal tmp_41_reg_1498 : STD_LOGIC_VECTOR (64 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal tmp_42_reg_1504 : STD_LOGIC_VECTOR (58 downto 0);
    signal tmp_43_reg_1509 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal grp_fu_938_p2 : STD_LOGIC_VECTOR (70 downto 0);
    signal r_V_17_reg_1525 : STD_LOGIC_VECTOR (70 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal tmp_44_reg_1530 : STD_LOGIC_VECTOR (59 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal tmp_45_reg_1536 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_46_reg_1541 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal grp_fu_1025_p2 : STD_LOGIC_VECTOR (65 downto 0);
    signal r_V_18_reg_1557 : STD_LOGIC_VECTOR (65 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal tmp_47_reg_1562 : STD_LOGIC_VECTOR (54 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal tmp_48_reg_1567 : STD_LOGIC_VECTOR (28 downto 0);
    signal zext_ln1270_fu_1096_p1 : STD_LOGIC_VECTOR (57 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal rhs_s_reg_1608 : STD_LOGIC_VECTOR (56 downto 0);
    signal logn_V_reg_1613 : STD_LOGIC_VECTOR (77 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal logn_V_2_reg_1618 : STD_LOGIC_VECTOR (69 downto 0);
    signal trunc_ln818_2_reg_1623 : STD_LOGIC_VECTOR (55 downto 0);
    signal add_ln813_fu_1177_p2 : STD_LOGIC_VECTOR (65 downto 0);
    signal add_ln813_reg_1629 : STD_LOGIC_VECTOR (65 downto 0);
    signal add_ln813_3_fu_1183_p2 : STD_LOGIC_VECTOR (81 downto 0);
    signal add_ln813_3_reg_1634 : STD_LOGIC_VECTOR (81 downto 0);
    signal add_ln813_2_fu_1215_p2 : STD_LOGIC_VECTOR (77 downto 0);
    signal add_ln813_2_reg_1640 : STD_LOGIC_VECTOR (77 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal add_ln813_4_fu_1224_p2 : STD_LOGIC_VECTOR (88 downto 0);
    signal add_ln813_4_reg_1646 : STD_LOGIC_VECTOR (88 downto 0);
    signal add_ln813_7_fu_1239_p2 : STD_LOGIC_VECTOR (87 downto 0);
    signal add_ln813_7_reg_1651 : STD_LOGIC_VECTOR (87 downto 0);
    signal p_Result_101_reg_1656 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal r_V_11_reg_1661 : STD_LOGIC_VECTOR (71 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal ap_phi_mux_conv_i_i_i38032_phi_fu_353_p4 : STD_LOGIC_VECTOR (81 downto 0);
    signal conv_i_i_i38032_reg_349 : STD_LOGIC_VECTOR (81 downto 0);
    signal ap_phi_mux_b_frac_013_lcssa29_phi_fu_364_p4 : STD_LOGIC_VECTOR (109 downto 0);
    signal b_frac_013_lcssa29_reg_361 : STD_LOGIC_VECTOR (109 downto 0);
    signal ap_phi_mux_index0_V_2_phi_fu_374_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal conv_i_i_i38031_reg_380 : STD_LOGIC_VECTOR (81 downto 0);
    signal r_V_reg_391 : STD_LOGIC_VECTOR (109 downto 0);
    signal ap_phi_mux_r_V_12_phi_fu_406_p4 : STD_LOGIC_VECTOR (71 downto 0);
    signal r_V_12_reg_402 : STD_LOGIC_VECTOR (71 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal zext_ln541_1_fu_1105_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln541_2_fu_1109_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln541_3_fu_1113_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln541_4_fu_1117_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln541_5_fu_1121_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_33_fu_244 : STD_LOGIC_VECTOR (108 downto 0);
    signal shl_ln1453_fu_495_p2 : STD_LOGIC_VECTOR (108 downto 0);
    signal p_Result_117_cast_fu_433_p3 : STD_LOGIC_VECTOR (108 downto 0);
    signal b_exp_V_fu_248 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln594_fu_419_p1 : STD_LOGIC_VECTOR (97 downto 0);
    signal tmp_s_fu_441_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln_fu_451_p3 : STD_LOGIC_VECTOR (108 downto 0);
    signal tmp_29_fu_509_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln731_1_fu_519_p3 : STD_LOGIC_VECTOR (108 downto 0);
    signal tmp_fu_533_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln731_fu_541_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln731_1_fu_527_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_567_p1 : STD_LOGIC_VECTOR (82 downto 0);
    signal grp_fu_567_p2 : STD_LOGIC_VECTOR (87 downto 0);
    signal grp_fu_612_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_612_p2 : STD_LOGIC_VECTOR (109 downto 0);
    signal zext_ln1488_cast_fu_666_p3 : STD_LOGIC_VECTOR (84 downto 0);
    signal tmp_32_fu_673_p3 : STD_LOGIC_VECTOR (85 downto 0);
    signal zext_ln1488_fu_680_p1 : STD_LOGIC_VECTOR (85 downto 0);
    signal grp_fu_697_p0 : STD_LOGIC_VECTOR (80 downto 0);
    signal grp_fu_697_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal lhs_fu_703_p3 : STD_LOGIC_VECTOR (84 downto 0);
    signal zext_ln1347_fu_710_p1 : STD_LOGIC_VECTOR (85 downto 0);
    signal ret_V_11_fu_714_p2 : STD_LOGIC_VECTOR (85 downto 0);
    signal zext_ln1348_fu_719_p1 : STD_LOGIC_VECTOR (85 downto 0);
    signal ret_V_2_fu_722_p2 : STD_LOGIC_VECTOR (85 downto 0);
    signal grp_fu_764_p0 : STD_LOGIC_VECTOR (74 downto 0);
    signal grp_fu_764_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal lhs_2_fu_777_p3 : STD_LOGIC_VECTOR (82 downto 0);
    signal eZ_fu_770_p3 : STD_LOGIC_VECTOR (82 downto 0);
    signal zext_ln1347_1_fu_784_p1 : STD_LOGIC_VECTOR (83 downto 0);
    signal zext_ln813_fu_788_p1 : STD_LOGIC_VECTOR (83 downto 0);
    signal rhs_3_fu_798_p3 : STD_LOGIC_VECTOR (81 downto 0);
    signal ret_V_12_fu_792_p2 : STD_LOGIC_VECTOR (83 downto 0);
    signal zext_ln1348_1_fu_805_p1 : STD_LOGIC_VECTOR (83 downto 0);
    signal ret_V_4_fu_809_p2 : STD_LOGIC_VECTOR (83 downto 0);
    signal grp_fu_851_p0 : STD_LOGIC_VECTOR (69 downto 0);
    signal grp_fu_851_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal lhs_4_fu_864_p3 : STD_LOGIC_VECTOR (87 downto 0);
    signal eZ_1_fu_857_p3 : STD_LOGIC_VECTOR (82 downto 0);
    signal zext_ln1347_2_fu_871_p1 : STD_LOGIC_VECTOR (88 downto 0);
    signal zext_ln813_1_fu_875_p1 : STD_LOGIC_VECTOR (88 downto 0);
    signal rhs_6_fu_885_p3 : STD_LOGIC_VECTOR (81 downto 0);
    signal ret_V_13_fu_879_p2 : STD_LOGIC_VECTOR (88 downto 0);
    signal zext_ln1348_2_fu_892_p1 : STD_LOGIC_VECTOR (88 downto 0);
    signal ret_V_6_fu_896_p2 : STD_LOGIC_VECTOR (88 downto 0);
    signal grp_fu_938_p0 : STD_LOGIC_VECTOR (64 downto 0);
    signal grp_fu_938_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal lhs_6_fu_951_p3 : STD_LOGIC_VECTOR (92 downto 0);
    signal eZ_2_fu_944_p3 : STD_LOGIC_VECTOR (82 downto 0);
    signal zext_ln1347_3_fu_958_p1 : STD_LOGIC_VECTOR (93 downto 0);
    signal zext_ln813_2_fu_962_p1 : STD_LOGIC_VECTOR (93 downto 0);
    signal rhs_9_fu_972_p3 : STD_LOGIC_VECTOR (81 downto 0);
    signal ret_V_14_fu_966_p2 : STD_LOGIC_VECTOR (93 downto 0);
    signal zext_ln1348_3_fu_979_p1 : STD_LOGIC_VECTOR (93 downto 0);
    signal ret_V_8_fu_983_p2 : STD_LOGIC_VECTOR (93 downto 0);
    signal grp_fu_1025_p0 : STD_LOGIC_VECTOR (59 downto 0);
    signal grp_fu_1025_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal lhs_8_fu_1038_p3 : STD_LOGIC_VECTOR (97 downto 0);
    signal eZ_3_fu_1031_p3 : STD_LOGIC_VECTOR (82 downto 0);
    signal zext_ln1347_4_fu_1045_p1 : STD_LOGIC_VECTOR (98 downto 0);
    signal zext_ln813_3_fu_1049_p1 : STD_LOGIC_VECTOR (98 downto 0);
    signal rhs_12_fu_1059_p3 : STD_LOGIC_VECTOR (81 downto 0);
    signal ret_V_15_fu_1053_p2 : STD_LOGIC_VECTOR (98 downto 0);
    signal zext_ln1348_4_fu_1066_p1 : STD_LOGIC_VECTOR (98 downto 0);
    signal ret_V_10_fu_1070_p2 : STD_LOGIC_VECTOR (98 downto 0);
    signal grp_fu_1099_p0 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_1099_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_1099_p2 : STD_LOGIC_VECTOR (57 downto 0);
    signal lhs_V_fu_1147_p3 : STD_LOGIC_VECTOR (84 downto 0);
    signal zext_ln1348_5_fu_1154_p1 : STD_LOGIC_VECTOR (85 downto 0);
    signal zext_ln1348_6_fu_1158_p1 : STD_LOGIC_VECTOR (85 downto 0);
    signal ret_V_fu_1161_p2 : STD_LOGIC_VECTOR (85 downto 0);
    signal zext_ln387_3_fu_1143_p1 : STD_LOGIC_VECTOR (65 downto 0);
    signal zext_ln387_2_fu_1139_p1 : STD_LOGIC_VECTOR (65 downto 0);
    signal zext_ln387_fu_1135_p1 : STD_LOGIC_VECTOR (81 downto 0);
    signal shl_ln_fu_1195_p3 : STD_LOGIC_VECTOR (87 downto 0);
    signal zext_ln387_1_fu_1189_p1 : STD_LOGIC_VECTOR (77 downto 0);
    signal add_ln813_1_fu_1210_p2 : STD_LOGIC_VECTOR (77 downto 0);
    signal zext_ln813_4_fu_1207_p1 : STD_LOGIC_VECTOR (77 downto 0);
    signal sext_ln813_fu_1203_p1 : STD_LOGIC_VECTOR (88 downto 0);
    signal sext_ln818_fu_1192_p1 : STD_LOGIC_VECTOR (88 downto 0);
    signal sext_ln813_2_fu_1221_p1 : STD_LOGIC_VECTOR (87 downto 0);
    signal add_ln813_5_fu_1233_p2 : STD_LOGIC_VECTOR (87 downto 0);
    signal sext_ln813_3_fu_1230_p1 : STD_LOGIC_VECTOR (87 downto 0);
    signal sext_ln813_1_fu_1248_p1 : STD_LOGIC_VECTOR (88 downto 0);
    signal add_ln813_6_fu_1251_p2 : STD_LOGIC_VECTOR (88 downto 0);
    signal zext_ln813_5_fu_1245_p1 : STD_LOGIC_VECTOR (88 downto 0);
    signal log_base_V_2_fu_1256_p2 : STD_LOGIC_VECTOR (88 downto 0);
    signal zext_ln813_6_fu_1270_p1 : STD_LOGIC_VECTOR (87 downto 0);
    signal shl_ln813_1_fu_1278_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln778_fu_1273_p2 : STD_LOGIC_VECTOR (87 downto 0);
    signal sext_ln813_4_fu_1285_p1 : STD_LOGIC_VECTOR (87 downto 0);
    signal log_base_V_fu_1289_p2 : STD_LOGIC_VECTOR (87 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (50 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal grp_fu_1025_p00 : STD_LOGIC_VECTOR (65 downto 0);
    signal grp_fu_1025_p10 : STD_LOGIC_VECTOR (65 downto 0);
    signal grp_fu_612_p10 : STD_LOGIC_VECTOR (109 downto 0);
    signal grp_fu_697_p00 : STD_LOGIC_VECTOR (84 downto 0);
    signal grp_fu_697_p10 : STD_LOGIC_VECTOR (84 downto 0);
    signal grp_fu_764_p00 : STD_LOGIC_VECTOR (80 downto 0);
    signal grp_fu_764_p10 : STD_LOGIC_VECTOR (80 downto 0);
    signal grp_fu_851_p00 : STD_LOGIC_VECTOR (75 downto 0);
    signal grp_fu_851_p10 : STD_LOGIC_VECTOR (75 downto 0);
    signal grp_fu_938_p00 : STD_LOGIC_VECTOR (70 downto 0);
    signal grp_fu_938_p10 : STD_LOGIC_VECTOR (70 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component clusterOp_mul_7s_83ns_88_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (82 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (87 downto 0) );
    end component;


    component clusterOp_mul_110s_6ns_110_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (109 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (109 downto 0) );
    end component;


    component clusterOp_mul_81ns_4ns_85_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (80 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (84 downto 0) );
    end component;


    component clusterOp_mul_75ns_6ns_81_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (74 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (80 downto 0) );
    end component;


    component clusterOp_mul_70ns_6ns_76_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (69 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (75 downto 0) );
    end component;


    component clusterOp_mul_65ns_6ns_71_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (64 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (70 downto 0) );
    end component;


    component clusterOp_mul_60ns_6ns_66_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (59 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (65 downto 0) );
    end component;


    component clusterOp_mul_29ns_29ns_58_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (28 downto 0);
        din1 : IN STD_LOGIC_VECTOR (28 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (57 downto 0) );
    end component;


    component clusterOp_log_99_33_s_log_apfixed_reduce_log_inverse_lut_table_array_V_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component clusterOp_log_99_33_s_log_apfixed_reduce_log0_lut_table_ap_fixed_0_5_64_array_V_ROM_AUTbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (81 downto 0) );
    end component;


    component clusterOp_log_99_33_s_log_apfixed_reduce_log_lut_table_ap_fixed_4_4_16_array_V_ROM_AUTOcud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (77 downto 0) );
    end component;


    component clusterOp_log_99_33_s_log_apfixed_reduce_log_lut_table_ap_fixed_7_6_64_array_V_ROM_AUTOdEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (74 downto 0) );
    end component;


    component clusterOp_log_99_33_s_log_apfixed_reduce_log_lut_table_ap_fixed_12_6_64_array_V_ROM_AUTeOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (69 downto 0) );
    end component;


    component clusterOp_log_99_33_s_log_apfixed_reduce_log_lut_table_ap_fixed_17_6_64_array_V_ROM_AUTfYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (64 downto 0) );
    end component;


    component clusterOp_log_99_33_s_log_apfixed_reduce_log_lut_table_ap_fixed_22_6_64_array_V_ROM_AUTg8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (59 downto 0) );
    end component;



begin
    log_apfixed_reduce_log_inverse_lut_table_array_V_U : component clusterOp_log_99_33_s_log_apfixed_reduce_log_inverse_lut_table_array_V_ROM_AUTO_1R
    generic map (
        DataWidth => 6,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => log_apfixed_reduce_log_inverse_lut_table_array_V_address0,
        ce0 => log_apfixed_reduce_log_inverse_lut_table_array_V_ce0,
        q0 => log_apfixed_reduce_log_inverse_lut_table_array_V_q0);

    log_apfixed_reduce_log0_lut_table_ap_fixed_0_5_64_array_V_U : component clusterOp_log_99_33_s_log_apfixed_reduce_log0_lut_table_ap_fixed_0_5_64_array_V_ROM_AUTbkb
    generic map (
        DataWidth => 82,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => log_apfixed_reduce_log0_lut_table_ap_fixed_0_5_64_array_V_address0,
        ce0 => log_apfixed_reduce_log0_lut_table_ap_fixed_0_5_64_array_V_ce0,
        q0 => log_apfixed_reduce_log0_lut_table_ap_fixed_0_5_64_array_V_q0);

    log_apfixed_reduce_log_lut_table_ap_fixed_4_4_16_array_V_U : component clusterOp_log_99_33_s_log_apfixed_reduce_log_lut_table_ap_fixed_4_4_16_array_V_ROM_AUTOcud
    generic map (
        DataWidth => 78,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => log_apfixed_reduce_log_lut_table_ap_fixed_4_4_16_array_V_address0,
        ce0 => log_apfixed_reduce_log_lut_table_ap_fixed_4_4_16_array_V_ce0,
        q0 => log_apfixed_reduce_log_lut_table_ap_fixed_4_4_16_array_V_q0);

    log_apfixed_reduce_log_lut_table_ap_fixed_7_6_64_array_V_U : component clusterOp_log_99_33_s_log_apfixed_reduce_log_lut_table_ap_fixed_7_6_64_array_V_ROM_AUTOdEe
    generic map (
        DataWidth => 75,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => log_apfixed_reduce_log_lut_table_ap_fixed_7_6_64_array_V_address0,
        ce0 => log_apfixed_reduce_log_lut_table_ap_fixed_7_6_64_array_V_ce0,
        q0 => log_apfixed_reduce_log_lut_table_ap_fixed_7_6_64_array_V_q0);

    log_apfixed_reduce_log_lut_table_ap_fixed_12_6_64_array_V_U : component clusterOp_log_99_33_s_log_apfixed_reduce_log_lut_table_ap_fixed_12_6_64_array_V_ROM_AUTeOg
    generic map (
        DataWidth => 70,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => log_apfixed_reduce_log_lut_table_ap_fixed_12_6_64_array_V_address0,
        ce0 => log_apfixed_reduce_log_lut_table_ap_fixed_12_6_64_array_V_ce0,
        q0 => log_apfixed_reduce_log_lut_table_ap_fixed_12_6_64_array_V_q0);

    log_apfixed_reduce_log_lut_table_ap_fixed_17_6_64_array_V_U : component clusterOp_log_99_33_s_log_apfixed_reduce_log_lut_table_ap_fixed_17_6_64_array_V_ROM_AUTfYi
    generic map (
        DataWidth => 65,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => log_apfixed_reduce_log_lut_table_ap_fixed_17_6_64_array_V_address0,
        ce0 => log_apfixed_reduce_log_lut_table_ap_fixed_17_6_64_array_V_ce0,
        q0 => log_apfixed_reduce_log_lut_table_ap_fixed_17_6_64_array_V_q0);

    log_apfixed_reduce_log_lut_table_ap_fixed_22_6_64_array_V_U : component clusterOp_log_99_33_s_log_apfixed_reduce_log_lut_table_ap_fixed_22_6_64_array_V_ROM_AUTg8j
    generic map (
        DataWidth => 60,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => log_apfixed_reduce_log_lut_table_ap_fixed_22_6_64_array_V_address0,
        ce0 => log_apfixed_reduce_log_lut_table_ap_fixed_22_6_64_array_V_ce0,
        q0 => log_apfixed_reduce_log_lut_table_ap_fixed_22_6_64_array_V_q0);

    mul_7s_83ns_88_5_1_U10 : component clusterOp_mul_7s_83ns_88_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 7,
        din1_WIDTH => 83,
        dout_WIDTH => 88)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => b_exp_V_3_reg_1332,
        din1 => grp_fu_567_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_567_p2);

    mul_110s_6ns_110_5_1_U11 : component clusterOp_mul_110s_6ns_110_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 110,
        din1_WIDTH => 6,
        dout_WIDTH => 110)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => r_V_reg_391,
        din1 => grp_fu_612_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_612_p2);

    mul_81ns_4ns_85_5_1_U12 : component clusterOp_mul_81ns_4ns_85_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 81,
        din1_WIDTH => 4,
        dout_WIDTH => 85)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_697_p0,
        din1 => grp_fu_697_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_697_p2);

    mul_75ns_6ns_81_5_1_U13 : component clusterOp_mul_75ns_6ns_81_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 75,
        din1_WIDTH => 6,
        dout_WIDTH => 81)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_764_p0,
        din1 => grp_fu_764_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_764_p2);

    mul_70ns_6ns_76_5_1_U14 : component clusterOp_mul_70ns_6ns_76_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 70,
        din1_WIDTH => 6,
        dout_WIDTH => 76)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_851_p0,
        din1 => grp_fu_851_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_851_p2);

    mul_65ns_6ns_71_5_1_U15 : component clusterOp_mul_65ns_6ns_71_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 65,
        din1_WIDTH => 6,
        dout_WIDTH => 71)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_938_p0,
        din1 => grp_fu_938_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_938_p2);

    mul_60ns_6ns_66_5_1_U16 : component clusterOp_mul_60ns_6ns_66_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 60,
        din1_WIDTH => 6,
        dout_WIDTH => 66)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1025_p0,
        din1 => grp_fu_1025_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1025_p2);

    mul_29ns_29ns_58_2_1_U17 : component clusterOp_mul_29ns_29ns_58_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 29,
        din1_WIDTH => 29,
        dout_WIDTH => 58)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1099_p0,
        din1 => grp_fu_1099_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1099_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv72_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
                    ap_return_preg <= ap_phi_mux_r_V_12_phi_fu_406_p4;
                end if; 
            end if;
        end if;
    end process;


    b_exp_V_fu_248_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln731_fu_459_p2 = ap_const_lv1_0) and (icmp_ln1652_fu_413_p2 = ap_const_lv1_0))) then 
                b_exp_V_fu_248 <= ap_const_lv7_20;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (select_ln731_fu_547_p3 = ap_const_lv1_0))) then 
                b_exp_V_fu_248 <= b_exp_V_3_reg_1332;
            end if; 
        end if;
    end process;

    b_frac_013_lcssa29_reg_361_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln731_fu_459_p2 = ap_const_lv1_1) and (icmp_ln1652_fu_413_p2 = ap_const_lv1_0))) then 
                                b_frac_013_lcssa29_reg_361(109 downto 11) <= p_Result_100_fu_423_p4(109 downto 11);
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (p_Result_s_reg_1349 = ap_const_lv1_0) and (icmp_ln731_reg_1314 = ap_const_lv1_0))) then 
                                b_frac_013_lcssa29_reg_361(109 downto 11) <= r_V_13_reg_1343(109 downto 11);
            end if; 
        end if;
    end process;

    conv_i_i_i38031_reg_380_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                if (((p_Result_s_reg_1349 = ap_const_lv1_0) or (icmp_ln731_reg_1314 = ap_const_lv1_1))) then 
                    conv_i_i_i38031_reg_380 <= ap_phi_mux_conv_i_i_i38032_phi_fu_353_p4;
                elsif (((p_Result_s_reg_1349 = ap_const_lv1_1) and (icmp_ln731_reg_1314 = ap_const_lv1_0))) then 
                    conv_i_i_i38031_reg_380 <= trunc_ln1_reg_1361;
                end if;
            end if; 
        end if;
    end process;

    conv_i_i_i38032_reg_349_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln731_fu_459_p2 = ap_const_lv1_1) and (icmp_ln1652_fu_413_p2 = ap_const_lv1_0))) then 
                conv_i_i_i38032_reg_349 <= ap_const_lv82_162E42FEFA39EF35793C7;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (p_Result_s_reg_1349 = ap_const_lv1_0) and (icmp_ln731_reg_1314 = ap_const_lv1_0))) then 
                conv_i_i_i38032_reg_349 <= trunc_ln1_reg_1361;
            end if; 
        end if;
    end process;

    p_Val2_33_fu_244_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln731_fu_459_p2 = ap_const_lv1_0) and (icmp_ln1652_fu_413_p2 = ap_const_lv1_0))) then 
                                p_Val2_33_fu_244(108 downto 11) <= p_Result_117_cast_fu_433_p3(108 downto 11);
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (select_ln731_fu_547_p3 = ap_const_lv1_0))) then 
                                p_Val2_33_fu_244(108 downto 11) <= shl_ln1453_fu_495_p2(108 downto 11);
            end if; 
        end if;
    end process;

    r_V_12_reg_402_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln1652_fu_413_p2 = ap_const_lv1_1))) then 
                r_V_12_reg_402 <= ap_const_lv72_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state51) and (icmp_ln1652_reg_1305 = ap_const_lv1_0))) then 
                r_V_12_reg_402 <= r_V_11_reg_1661;
            end if; 
        end if;
    end process;

    r_V_reg_391_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                if (((p_Result_s_reg_1349 = ap_const_lv1_0) or (icmp_ln731_reg_1314 = ap_const_lv1_1))) then 
                                        r_V_reg_391(109 downto 11) <= ap_phi_mux_b_frac_013_lcssa29_phi_fu_364_p4(109 downto 11);
                elsif (((p_Result_s_reg_1349 = ap_const_lv1_1) and (icmp_ln731_reg_1314 = ap_const_lv1_0))) then 
                                        r_V_reg_391(109 downto 11) <= r_V_13_reg_1343(109 downto 11);
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                a_V_reg_1387 <= grp_fu_612_p2(109 downto 106);
                tmp_30_reg_1393 <= grp_fu_612_p2(109 downto 29);
                tmp_31_reg_1404 <= grp_fu_612_p2(109 downto 30);
                tmp_33_reg_1409 <= grp_fu_612_p2(105 downto 29);
                tmp_38_reg_1399 <= grp_fu_612_p2(109 downto 109);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state48)) then
                add_ln813_2_reg_1640 <= add_ln813_2_fu_1215_p2;
                add_ln813_4_reg_1646 <= add_ln813_4_fu_1224_p2;
                add_ln813_7_reg_1651 <= add_ln813_7_fu_1239_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then
                add_ln813_3_reg_1634 <= add_ln813_3_fu_1183_p2;
                add_ln813_reg_1629 <= add_ln813_fu_1177_p2;
                logn_V_2_reg_1618 <= log_apfixed_reduce_log_lut_table_ap_fixed_12_6_64_array_V_q0;
                logn_V_reg_1613 <= log_apfixed_reduce_log_lut_table_ap_fixed_4_4_16_array_V_q0;
                trunc_ln818_2_reg_1623 <= ret_V_fu_1161_p2(85 downto 30);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                b_exp_V_3_reg_1332 <= b_exp_V_3_fu_478_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                b_frac_tilde_inverse_V_reg_1377 <= log_apfixed_reduce_log_inverse_lut_table_array_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                icmp_ln1652_reg_1305 <= icmp_ln1652_fu_413_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln1652_fu_413_p2 = ap_const_lv1_0))) then
                icmp_ln731_reg_1314 <= icmp_ln731_fu_459_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then
                p_Result_101_reg_1656 <= log_base_V_2_fu_1256_p2(88 downto 88);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                p_Result_s_reg_1349 <= p_Val2_33_fu_244(108 downto 108);
                    p_Val2_34_reg_1338(108 downto 11) <= p_Val2_33_fu_244(108 downto 11);
                    r_V_13_reg_1343(109 downto 12) <= r_V_13_fu_487_p3(109 downto 12);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state50)) then
                r_V_11_reg_1661 <= log_base_V_fu_1289_p2(87 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                r_V_14_reg_1429 <= grp_fu_697_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                r_V_15_reg_1461 <= grp_fu_764_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                r_V_16_reg_1493 <= grp_fu_851_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
                r_V_17_reg_1525 <= grp_fu_938_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then
                r_V_18_reg_1557 <= grp_fu_1025_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                rhs_s_reg_1608 <= grp_fu_1099_p2(57 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                    select_ln1488_reg_1414(80 downto 0) <= select_ln1488_fu_684_p3(80 downto 0);    select_ln1488_reg_1414(85 downto 84) <= select_ln1488_fu_684_p3(85 downto 84);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                tmp_34_reg_1434 <= ret_V_2_fu_722_p2(85 downto 11);
                tmp_35_reg_1440 <= ret_V_2_fu_722_p2(79 downto 11);
                tmp_36_reg_1445 <= ret_V_2_fu_722_p2(85 downto 80);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                tmp_37_reg_1466 <= ret_V_4_fu_809_p2(83 downto 14);
                tmp_39_reg_1472 <= ret_V_4_fu_809_p2(77 downto 14);
                tmp_40_reg_1477 <= ret_V_4_fu_809_p2(83 downto 78);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                tmp_41_reg_1498 <= ret_V_6_fu_896_p2(88 downto 24);
                tmp_42_reg_1504 <= ret_V_6_fu_896_p2(82 downto 24);
                tmp_43_reg_1509 <= ret_V_6_fu_896_p2(88 downto 83);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                tmp_44_reg_1530 <= ret_V_8_fu_983_p2(93 downto 34);
                tmp_45_reg_1536 <= ret_V_8_fu_983_p2(87 downto 34);
                tmp_46_reg_1541 <= ret_V_8_fu_983_p2(93 downto 88);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then
                tmp_47_reg_1562 <= ret_V_10_fu_1070_p2(98 downto 44);
                tmp_48_reg_1567 <= ret_V_10_fu_1070_p2(98 downto 70);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                trunc_ln1_reg_1361 <= grp_fu_567_p2(87 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                    zext_ln541_reg_1367(5 downto 0) <= zext_ln541_fu_604_p1(5 downto 0);
            end if;
        end if;
    end process;
    p_Val2_34_reg_1338(10 downto 0) <= "00000000000";
    r_V_13_reg_1343(11 downto 0) <= "000000000000";
    zext_ln541_reg_1367(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    select_ln1488_reg_1414(83 downto 81) <= "000";
    b_frac_013_lcssa29_reg_361(10 downto 0) <= "00000000000";
    r_V_reg_391(10 downto 0) <= "00000000000";
    p_Val2_33_fu_244(10 downto 0) <= "00000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln1652_fu_413_p2, icmp_ln731_fu_459_p2, ap_CS_fsm_state3, select_ln731_fu_547_p3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln731_fu_459_p2 = ap_const_lv1_0) and (icmp_ln1652_fu_413_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln731_fu_459_p2 = ap_const_lv1_1) and (icmp_ln1652_fu_413_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln1652_fu_413_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state51;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (select_ln731_fu_547_p3 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln778_fu_1273_p2 <= std_logic_vector(unsigned(add_ln813_7_reg_1651) + unsigned(zext_ln813_6_fu_1270_p1));
    add_ln813_1_fu_1210_p2 <= std_logic_vector(unsigned(zext_ln387_1_fu_1189_p1) + unsigned(logn_V_reg_1613));
    add_ln813_2_fu_1215_p2 <= std_logic_vector(unsigned(add_ln813_1_fu_1210_p2) + unsigned(zext_ln813_4_fu_1207_p1));
    add_ln813_3_fu_1183_p2 <= std_logic_vector(unsigned(zext_ln387_fu_1135_p1) + unsigned(log_apfixed_reduce_log0_lut_table_ap_fixed_0_5_64_array_V_q0));
    add_ln813_4_fu_1224_p2 <= std_logic_vector(signed(sext_ln813_fu_1203_p1) + signed(sext_ln818_fu_1192_p1));
    add_ln813_5_fu_1233_p2 <= std_logic_vector(signed(shl_ln_fu_1195_p3) + signed(sext_ln813_2_fu_1221_p1));
    add_ln813_6_fu_1251_p2 <= std_logic_vector(unsigned(add_ln813_4_reg_1646) + unsigned(sext_ln813_1_fu_1248_p1));
    add_ln813_7_fu_1239_p2 <= std_logic_vector(unsigned(add_ln813_5_fu_1233_p2) + unsigned(sext_ln813_3_fu_1230_p1));
    add_ln813_fu_1177_p2 <= std_logic_vector(unsigned(zext_ln387_3_fu_1143_p1) + unsigned(zext_ln387_2_fu_1139_p1));
    and_ln731_1_fu_519_p3 <= (tmp_29_fu_509_p4 & ap_const_lv107_0);
    and_ln_fu_451_p3 <= (tmp_s_fu_441_p4 & ap_const_lv107_0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;
    ap_ST_fsm_state46_blk <= ap_const_logic_0;
    ap_ST_fsm_state47_blk <= ap_const_logic_0;
    ap_ST_fsm_state48_blk <= ap_const_logic_0;
    ap_ST_fsm_state49_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state50_blk <= ap_const_logic_0;
    ap_ST_fsm_state51_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state51)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state51) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_b_frac_013_lcssa29_phi_fu_364_p4_assign_proc : process(icmp_ln731_reg_1314, r_V_13_reg_1343, p_Result_s_reg_1349, ap_CS_fsm_state8, b_frac_013_lcssa29_reg_361)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (p_Result_s_reg_1349 = ap_const_lv1_0) and (icmp_ln731_reg_1314 = ap_const_lv1_0))) then 
            ap_phi_mux_b_frac_013_lcssa29_phi_fu_364_p4 <= r_V_13_reg_1343;
        else 
            ap_phi_mux_b_frac_013_lcssa29_phi_fu_364_p4 <= b_frac_013_lcssa29_reg_361;
        end if; 
    end process;


    ap_phi_mux_conv_i_i_i38032_phi_fu_353_p4_assign_proc : process(icmp_ln731_reg_1314, p_Result_s_reg_1349, trunc_ln1_reg_1361, ap_CS_fsm_state8, conv_i_i_i38032_reg_349)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (p_Result_s_reg_1349 = ap_const_lv1_0) and (icmp_ln731_reg_1314 = ap_const_lv1_0))) then 
            ap_phi_mux_conv_i_i_i38032_phi_fu_353_p4 <= trunc_ln1_reg_1361;
        else 
            ap_phi_mux_conv_i_i_i38032_phi_fu_353_p4 <= conv_i_i_i38032_reg_349;
        end if; 
    end process;


    ap_phi_mux_index0_V_2_phi_fu_374_p4_assign_proc : process(icmp_ln731_reg_1314, p_Val2_34_reg_1338, p_Result_s_reg_1349, ap_CS_fsm_state8, ap_phi_mux_b_frac_013_lcssa29_phi_fu_364_p4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
            if (((p_Result_s_reg_1349 = ap_const_lv1_0) or (icmp_ln731_reg_1314 = ap_const_lv1_1))) then 
                ap_phi_mux_index0_V_2_phi_fu_374_p4 <= ap_phi_mux_b_frac_013_lcssa29_phi_fu_364_p4(107 downto 102);
            elsif (((p_Result_s_reg_1349 = ap_const_lv1_1) and (icmp_ln731_reg_1314 = ap_const_lv1_0))) then 
                ap_phi_mux_index0_V_2_phi_fu_374_p4 <= p_Val2_34_reg_1338(107 downto 102);
            else 
                ap_phi_mux_index0_V_2_phi_fu_374_p4 <= "XXXXXX";
            end if;
        else 
            ap_phi_mux_index0_V_2_phi_fu_374_p4 <= "XXXXXX";
        end if; 
    end process;


    ap_phi_mux_r_V_12_phi_fu_406_p4_assign_proc : process(icmp_ln1652_reg_1305, r_V_11_reg_1661, r_V_12_reg_402, ap_CS_fsm_state51)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state51) and (icmp_ln1652_reg_1305 = ap_const_lv1_0))) then 
            ap_phi_mux_r_V_12_phi_fu_406_p4 <= r_V_11_reg_1661;
        else 
            ap_phi_mux_r_V_12_phi_fu_406_p4 <= r_V_12_reg_402;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state51)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_phi_mux_r_V_12_phi_fu_406_p4, ap_CS_fsm_state51, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            ap_return <= ap_phi_mux_r_V_12_phi_fu_406_p4;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    b_exp_V_3_fu_478_p2 <= std_logic_vector(unsigned(b_exp_V_fu_248) + unsigned(ap_const_lv7_7F));
    eZ_1_fu_857_p3 <= (ap_const_lv13_1000 & tmp_37_reg_1466);
    eZ_2_fu_944_p3 <= (ap_const_lv18_20000 & tmp_41_reg_1498);
    eZ_3_fu_1031_p3 <= (ap_const_lv23_400000 & tmp_44_reg_1530);
    eZ_fu_770_p3 <= (ap_const_lv8_80 & tmp_34_reg_1434);
    grp_fu_1025_p0 <= grp_fu_1025_p00(60 - 1 downto 0);
    grp_fu_1025_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_44_reg_1530),66));
    grp_fu_1025_p1 <= grp_fu_1025_p10(6 - 1 downto 0);
    grp_fu_1025_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_46_reg_1541),66));
    grp_fu_1099_p0 <= zext_ln1270_fu_1096_p1(29 - 1 downto 0);
    grp_fu_1099_p1 <= zext_ln1270_fu_1096_p1(29 - 1 downto 0);
    grp_fu_567_p1 <= ap_const_lv88_2C5C85FDF473DE6AF278E(83 - 1 downto 0);
    grp_fu_612_p1 <= grp_fu_612_p10(6 - 1 downto 0);
    grp_fu_612_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_frac_tilde_inverse_V_reg_1377),110));
    grp_fu_697_p0 <= grp_fu_697_p00(81 - 1 downto 0);
    grp_fu_697_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_30_reg_1393),85));
    grp_fu_697_p1 <= grp_fu_697_p10(4 - 1 downto 0);
    grp_fu_697_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_V_reg_1387),85));
    grp_fu_764_p0 <= grp_fu_764_p00(75 - 1 downto 0);
    grp_fu_764_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_34_reg_1434),81));
    grp_fu_764_p1 <= grp_fu_764_p10(6 - 1 downto 0);
    grp_fu_764_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_36_reg_1445),81));
    grp_fu_851_p0 <= grp_fu_851_p00(70 - 1 downto 0);
    grp_fu_851_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_37_reg_1466),76));
    grp_fu_851_p1 <= grp_fu_851_p10(6 - 1 downto 0);
    grp_fu_851_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_40_reg_1477),76));
    grp_fu_938_p0 <= grp_fu_938_p00(65 - 1 downto 0);
    grp_fu_938_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_41_reg_1498),71));
    grp_fu_938_p1 <= grp_fu_938_p10(6 - 1 downto 0);
    grp_fu_938_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_43_reg_1509),71));
    icmp_ln1652_fu_413_p2 <= "1" when (signed(x) < signed(ap_const_lv99_1)) else "0";
    icmp_ln731_1_fu_527_p2 <= "1" when (and_ln731_1_fu_519_p3 = ap_const_lv109_1800000000000000000000000000) else "0";
    icmp_ln731_fu_459_p2 <= "1" when (and_ln_fu_451_p3 = ap_const_lv109_1800000000000000000000000000) else "0";
    lhs_2_fu_777_p3 <= (tmp_35_reg_1440 & ap_const_lv14_0);
    lhs_4_fu_864_p3 <= (tmp_39_reg_1472 & ap_const_lv24_0);
    lhs_6_fu_951_p3 <= (tmp_42_reg_1504 & ap_const_lv34_0);
    lhs_8_fu_1038_p3 <= (tmp_45_reg_1536 & ap_const_lv44_0);
    lhs_V_fu_1147_p3 <= (tmp_47_reg_1562 & ap_const_lv30_0);
    lhs_fu_703_p3 <= (tmp_33_reg_1409 & ap_const_lv8_0);
    log_apfixed_reduce_log0_lut_table_ap_fixed_0_5_64_array_V_address0 <= zext_ln541_reg_1367(6 - 1 downto 0);

    log_apfixed_reduce_log0_lut_table_ap_fixed_0_5_64_array_V_ce0_assign_proc : process(ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            log_apfixed_reduce_log0_lut_table_ap_fixed_0_5_64_array_V_ce0 <= ap_const_logic_1;
        else 
            log_apfixed_reduce_log0_lut_table_ap_fixed_0_5_64_array_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    log_apfixed_reduce_log_inverse_lut_table_array_V_address0 <= zext_ln541_fu_604_p1(6 - 1 downto 0);

    log_apfixed_reduce_log_inverse_lut_table_array_V_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            log_apfixed_reduce_log_inverse_lut_table_array_V_ce0 <= ap_const_logic_1;
        else 
            log_apfixed_reduce_log_inverse_lut_table_array_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    log_apfixed_reduce_log_lut_table_ap_fixed_12_6_64_array_V_address0 <= zext_ln541_3_fu_1113_p1(6 - 1 downto 0);

    log_apfixed_reduce_log_lut_table_ap_fixed_12_6_64_array_V_ce0_assign_proc : process(ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            log_apfixed_reduce_log_lut_table_ap_fixed_12_6_64_array_V_ce0 <= ap_const_logic_1;
        else 
            log_apfixed_reduce_log_lut_table_ap_fixed_12_6_64_array_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    log_apfixed_reduce_log_lut_table_ap_fixed_17_6_64_array_V_address0 <= zext_ln541_4_fu_1117_p1(6 - 1 downto 0);

    log_apfixed_reduce_log_lut_table_ap_fixed_17_6_64_array_V_ce0_assign_proc : process(ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            log_apfixed_reduce_log_lut_table_ap_fixed_17_6_64_array_V_ce0 <= ap_const_logic_1;
        else 
            log_apfixed_reduce_log_lut_table_ap_fixed_17_6_64_array_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    log_apfixed_reduce_log_lut_table_ap_fixed_22_6_64_array_V_address0 <= zext_ln541_5_fu_1121_p1(6 - 1 downto 0);

    log_apfixed_reduce_log_lut_table_ap_fixed_22_6_64_array_V_ce0_assign_proc : process(ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            log_apfixed_reduce_log_lut_table_ap_fixed_22_6_64_array_V_ce0 <= ap_const_logic_1;
        else 
            log_apfixed_reduce_log_lut_table_ap_fixed_22_6_64_array_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    log_apfixed_reduce_log_lut_table_ap_fixed_4_4_16_array_V_address0 <= zext_ln541_1_fu_1105_p1(4 - 1 downto 0);

    log_apfixed_reduce_log_lut_table_ap_fixed_4_4_16_array_V_ce0_assign_proc : process(ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            log_apfixed_reduce_log_lut_table_ap_fixed_4_4_16_array_V_ce0 <= ap_const_logic_1;
        else 
            log_apfixed_reduce_log_lut_table_ap_fixed_4_4_16_array_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    log_apfixed_reduce_log_lut_table_ap_fixed_7_6_64_array_V_address0 <= zext_ln541_2_fu_1109_p1(6 - 1 downto 0);

    log_apfixed_reduce_log_lut_table_ap_fixed_7_6_64_array_V_ce0_assign_proc : process(ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            log_apfixed_reduce_log_lut_table_ap_fixed_7_6_64_array_V_ce0 <= ap_const_logic_1;
        else 
            log_apfixed_reduce_log_lut_table_ap_fixed_7_6_64_array_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    log_base_V_2_fu_1256_p2 <= std_logic_vector(unsigned(add_ln813_6_fu_1251_p2) + unsigned(zext_ln813_5_fu_1245_p1));
    log_base_V_fu_1289_p2 <= std_logic_vector(unsigned(add_ln778_fu_1273_p2) + unsigned(sext_ln813_4_fu_1285_p1));
    p_Result_100_fu_423_p4 <= ((ap_const_lv1_0 & trunc_ln594_fu_419_p1) & ap_const_lv11_0);
    p_Result_117_cast_fu_433_p3 <= (trunc_ln594_fu_419_p1 & ap_const_lv11_0);
    p_Result_s_fu_501_p3 <= p_Val2_33_fu_244(108 downto 108);
    r_V_13_fu_487_p3 <= (p_Val2_33_fu_244 & ap_const_lv1_0);
    ret_V_10_fu_1070_p2 <= std_logic_vector(unsigned(ret_V_15_fu_1053_p2) - unsigned(zext_ln1348_4_fu_1066_p1));
    ret_V_11_fu_714_p2 <= std_logic_vector(unsigned(zext_ln1347_fu_710_p1) + unsigned(select_ln1488_reg_1414));
    ret_V_12_fu_792_p2 <= std_logic_vector(unsigned(zext_ln1347_1_fu_784_p1) + unsigned(zext_ln813_fu_788_p1));
    ret_V_13_fu_879_p2 <= std_logic_vector(unsigned(zext_ln1347_2_fu_871_p1) + unsigned(zext_ln813_1_fu_875_p1));
    ret_V_14_fu_966_p2 <= std_logic_vector(unsigned(zext_ln1347_3_fu_958_p1) + unsigned(zext_ln813_2_fu_962_p1));
    ret_V_15_fu_1053_p2 <= std_logic_vector(unsigned(zext_ln1347_4_fu_1045_p1) + unsigned(zext_ln813_3_fu_1049_p1));
    ret_V_2_fu_722_p2 <= std_logic_vector(unsigned(ret_V_11_fu_714_p2) - unsigned(zext_ln1348_fu_719_p1));
    ret_V_4_fu_809_p2 <= std_logic_vector(unsigned(ret_V_12_fu_792_p2) - unsigned(zext_ln1348_1_fu_805_p1));
    ret_V_6_fu_896_p2 <= std_logic_vector(unsigned(ret_V_13_fu_879_p2) - unsigned(zext_ln1348_2_fu_892_p1));
    ret_V_8_fu_983_p2 <= std_logic_vector(unsigned(ret_V_14_fu_966_p2) - unsigned(zext_ln1348_3_fu_979_p1));
    ret_V_fu_1161_p2 <= std_logic_vector(unsigned(zext_ln1348_5_fu_1154_p1) - unsigned(zext_ln1348_6_fu_1158_p1));
    rhs_12_fu_1059_p3 <= (r_V_18_reg_1557 & ap_const_lv16_0);
    rhs_3_fu_798_p3 <= (r_V_15_reg_1461 & ap_const_lv1_0);
    rhs_6_fu_885_p3 <= (r_V_16_reg_1493 & ap_const_lv6_0);
    rhs_9_fu_972_p3 <= (r_V_17_reg_1525 & ap_const_lv11_0);
    select_ln1488_fu_684_p3 <= 
        tmp_32_fu_673_p3 when (tmp_38_reg_1399(0) = '1') else 
        zext_ln1488_fu_680_p1;
    select_ln731_fu_547_p3 <= 
        xor_ln731_fu_541_p2 when (p_Result_s_fu_501_p3(0) = '1') else 
        icmp_ln731_1_fu_527_p2;
        sext_ln813_1_fu_1248_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln813_3_reg_1634),89));

        sext_ln813_2_fu_1221_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln818_2_reg_1623),88));

        sext_ln813_3_fu_1230_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln813_3_reg_1634),88));

        sext_ln813_4_fu_1285_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln813_1_fu_1278_p3),88));

        sext_ln813_fu_1203_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln_fu_1195_p3),89));

        sext_ln818_fu_1192_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln818_2_reg_1623),89));

    shl_ln1453_fu_495_p2 <= std_logic_vector(shift_left(unsigned(p_Val2_33_fu_244),to_integer(unsigned('0' & ap_const_lv109_1(31-1 downto 0)))));
    shl_ln813_1_fu_1278_p3 <= (p_Result_101_reg_1656 & ap_const_lv16_8000);
    shl_ln_fu_1195_p3 <= (conv_i_i_i38031_reg_380 & ap_const_lv6_0);
    tmp_29_fu_509_p4 <= p_Val2_33_fu_244(107 downto 106);
    tmp_32_fu_673_p3 <= (ap_const_lv5_10 & tmp_30_reg_1393);
    tmp_fu_533_p3 <= p_Val2_33_fu_244(107 downto 107);
    tmp_s_fu_441_p4 <= x(97 downto 96);
    trunc_ln594_fu_419_p1 <= x(98 - 1 downto 0);
    xor_ln731_fu_541_p2 <= (tmp_fu_533_p3 xor ap_const_lv1_1);
    zext_ln1270_fu_1096_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_48_reg_1567),58));
    zext_ln1347_1_fu_784_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lhs_2_fu_777_p3),84));
    zext_ln1347_2_fu_871_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lhs_4_fu_864_p3),89));
    zext_ln1347_3_fu_958_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lhs_6_fu_951_p3),94));
    zext_ln1347_4_fu_1045_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lhs_8_fu_1038_p3),99));
    zext_ln1347_fu_710_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lhs_fu_703_p3),86));
    zext_ln1348_1_fu_805_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rhs_3_fu_798_p3),84));
    zext_ln1348_2_fu_892_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rhs_6_fu_885_p3),89));
    zext_ln1348_3_fu_979_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rhs_9_fu_972_p3),94));
    zext_ln1348_4_fu_1066_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rhs_12_fu_1059_p3),99));
    zext_ln1348_5_fu_1154_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lhs_V_fu_1147_p3),86));
    zext_ln1348_6_fu_1158_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rhs_s_reg_1608),86));
    zext_ln1348_fu_719_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_14_reg_1429),86));
    zext_ln1488_cast_fu_666_p3 <= (ap_const_lv5_10 & tmp_31_reg_1404);
    zext_ln1488_fu_680_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln1488_cast_fu_666_p3),86));
    zext_ln387_1_fu_1189_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(logn_V_2_reg_1618),78));
    zext_ln387_2_fu_1139_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(log_apfixed_reduce_log_lut_table_ap_fixed_17_6_64_array_V_q0),66));
    zext_ln387_3_fu_1143_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(log_apfixed_reduce_log_lut_table_ap_fixed_22_6_64_array_V_q0),66));
    zext_ln387_fu_1135_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(log_apfixed_reduce_log_lut_table_ap_fixed_7_6_64_array_V_q0),82));
    zext_ln541_1_fu_1105_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_V_reg_1387),64));
    zext_ln541_2_fu_1109_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_36_reg_1445),64));
    zext_ln541_3_fu_1113_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_40_reg_1477),64));
    zext_ln541_4_fu_1117_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_43_reg_1509),64));
    zext_ln541_5_fu_1121_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_46_reg_1541),64));
    zext_ln541_fu_604_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_index0_V_2_phi_fu_374_p4),64));
    zext_ln813_1_fu_875_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(eZ_1_fu_857_p3),89));
    zext_ln813_2_fu_962_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(eZ_2_fu_944_p3),94));
    zext_ln813_3_fu_1049_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(eZ_3_fu_1031_p3),99));
    zext_ln813_4_fu_1207_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln813_reg_1629),78));
    zext_ln813_5_fu_1245_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln813_2_reg_1640),89));
    zext_ln813_6_fu_1270_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln813_2_reg_1640),88));
    zext_ln813_fu_788_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(eZ_fu_770_p3),84));
end behav;
