-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity clusterOp_clusterOp_Pipeline_VITIS_LOOP_42_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    grouped_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    grouped_ce0 : OUT STD_LOGIC;
    grouped_we0 : OUT STD_LOGIC;
    grouped_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    grouped_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    put : IN STD_LOGIC_VECTOR (8 downto 0);
    zext_ln33_1 : IN STD_LOGIC_VECTOR (8 downto 0);
    distances_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    distances_ce0 : OUT STD_LOGIC;
    distances_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    distances_load : IN STD_LOGIC_VECTOR (31 downto 0);
    mul_ln37 : IN STD_LOGIC_VECTOR (16 downto 0);
    clusters_members_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    clusters_members_ce0 : OUT STD_LOGIC;
    clusters_members_we0 : OUT STD_LOGIC;
    clusters_members_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    p_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of clusterOp_clusterOp_Pipeline_VITIS_LOOP_42_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (24 downto 0) := "0000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (24 downto 0) := "0000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (24 downto 0) := "0000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (24 downto 0) := "0000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (24 downto 0) := "0000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (24 downto 0) := "0000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (24 downto 0) := "0001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (24 downto 0) := "0010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (24 downto 0) := "0100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (24 downto 0) := "1000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_43480000 : STD_LOGIC_VECTOR (31 downto 0) := "01000011010010000000000000000000";
    constant ap_const_lv9_168 : STD_LOGIC_VECTOR (8 downto 0) := "101101000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv10_B4 : STD_LOGIC_VECTOR (9 downto 0) := "0010110100";
    constant ap_const_lv10_168 : STD_LOGIC_VECTOR (9 downto 0) := "0101101000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_boolean_0 : BOOLEAN := false;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal zext_ln33_1_cast_fu_252_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln33_1_cast_reg_461 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln42_fu_275_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln42_reg_472 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal trunc_ln54_cast_fu_281_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln54_cast_reg_477 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln42_fu_269_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grouped_addr_reg_482 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln43_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_reg_487 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln43_fu_294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln43_reg_492 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal sub_ln44_fu_299_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln44_reg_496 : STD_LOGIC_VECTOR (9 downto 0);
    signal delta_angle_fu_314_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal delta_angle_reg_508 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal xf_V_1_fu_321_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xf_V_1_reg_515 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln44_fu_343_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln44_reg_520 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_pow_32_32_s_fu_177_ap_return : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Val2_s_reg_525 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_pow_32_32_s_fu_206_ap_return : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Val2_45_reg_530 : STD_LOGIC_VECTOR (30 downto 0);
    signal xf_V_2_fu_354_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xf_V_2_reg_535 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_sqrt_fixed_32_32_s_fu_235_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_46_reg_540 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal grp_fu_240_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal euclidean_distance_reg_550 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal icmp_ln53_fu_381_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln53_reg_556 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal icmp_ln53_1_fu_387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln53_1_reg_561 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln53_fu_397_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln53_reg_566 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal grp_pow_32_32_s_fu_177_ap_start : STD_LOGIC;
    signal grp_pow_32_32_s_fu_177_ap_done : STD_LOGIC;
    signal grp_pow_32_32_s_fu_177_ap_idle : STD_LOGIC;
    signal grp_pow_32_32_s_fu_177_ap_ready : STD_LOGIC;
    signal grp_pow_32_32_s_fu_206_ap_start : STD_LOGIC;
    signal grp_pow_32_32_s_fu_206_ap_done : STD_LOGIC;
    signal grp_pow_32_32_s_fu_206_ap_idle : STD_LOGIC;
    signal grp_pow_32_32_s_fu_206_ap_ready : STD_LOGIC;
    signal grp_pow_32_32_s_fu_177_ap_start_reg : STD_LOGIC := '0';
    signal grp_pow_32_32_s_fu_206_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal zext_ln54_fu_412_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal candidate_fu_98 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_fu_102 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln55_fu_417_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_240_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal candidate_cast_fu_291_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal abscond_fu_309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal neg_fu_304_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln45_fu_326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln46_fu_331_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal delta_angle_2_fu_336_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln987_1_fu_351_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln987_fu_348_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln53_fu_364_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_367_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln53_fu_377_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln53_fu_393_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_243_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln54_fu_403_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln54_fu_407_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_block_state6_on_subcall_done : BOOLEAN;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component clusterOp_pow_32_32_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component clusterOp_sqrt_fixed_32_32_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        x : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component clusterOp_sitofp_32ns_32_6_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component clusterOp_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    grp_pow_32_32_s_fu_177 : component clusterOp_pow_32_32_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_pow_32_32_s_fu_177_ap_start,
        ap_done => grp_pow_32_32_s_fu_177_ap_done,
        ap_idle => grp_pow_32_32_s_fu_177_ap_idle,
        ap_ready => grp_pow_32_32_s_fu_177_ap_ready,
        x => sext_ln44_reg_520,
        ap_return => grp_pow_32_32_s_fu_177_ap_return);

    grp_pow_32_32_s_fu_206 : component clusterOp_pow_32_32_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_pow_32_32_s_fu_206_ap_start,
        ap_done => grp_pow_32_32_s_fu_206_ap_done,
        ap_idle => grp_pow_32_32_s_fu_206_ap_idle,
        ap_ready => grp_pow_32_32_s_fu_206_ap_ready,
        x => xf_V_1_reg_515,
        ap_return => grp_pow_32_32_s_fu_206_ap_return);

    grp_sqrt_fixed_32_32_s_fu_235 : component clusterOp_sqrt_fixed_32_32_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        x => xf_V_2_reg_535,
        ap_return => grp_sqrt_fixed_32_32_s_fu_235_ap_return);

    sitofp_32ns_32_6_no_dsp_1_U52 : component clusterOp_sitofp_32ns_32_6_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_240_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_240_p1);

    fcmp_32ns_32ns_1_2_no_dsp_1_U53 : component clusterOp_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => euclidean_distance_reg_550,
        din1 => ap_const_lv32_43480000,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_243_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_pow_32_32_s_fu_177_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_pow_32_32_s_fu_177_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_pow_32_32_s_fu_177_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pow_32_32_s_fu_177_ap_ready = ap_const_logic_1)) then 
                    grp_pow_32_32_s_fu_177_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_pow_32_32_s_fu_206_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_pow_32_32_s_fu_206_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_pow_32_32_s_fu_206_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pow_32_32_s_fu_206_ap_ready = ap_const_logic_1)) then 
                    grp_pow_32_32_s_fu_206_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    candidate_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                candidate_fu_98 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                candidate_fu_98 <= add_ln42_reg_472;
            end if; 
        end if;
    end process;

    empty_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                empty_fu_102 <= ap_const_lv32_1;
            elsif (((or_ln43_reg_492 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln53_reg_566) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
                empty_fu_102 <= add_ln55_fu_417_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln42_reg_472 <= add_ln42_fu_275_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                and_ln53_reg_566 <= and_ln53_fu_397_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                delta_angle_reg_508 <= delta_angle_fu_314_p3;
                xf_V_1_reg_515 <= xf_V_1_fu_321_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                euclidean_distance_reg_550 <= grp_fu_240_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln42_fu_269_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                grouped_addr_reg_482 <= trunc_ln54_cast_fu_281_p1(9 - 1 downto 0);
                icmp_ln43_reg_487 <= icmp_ln43_fu_286_p2;
                    trunc_ln54_cast_reg_477(8 downto 0) <= trunc_ln54_cast_fu_281_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                icmp_ln53_1_reg_561 <= icmp_ln53_1_fu_387_p2;
                icmp_ln53_reg_556 <= icmp_ln53_fu_381_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                or_ln43_reg_492 <= or_ln43_fu_294_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                p_Val2_45_reg_530 <= grp_pow_32_32_s_fu_206_ap_return;
                p_Val2_s_reg_525 <= grp_pow_32_32_s_fu_177_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                p_Val2_46_reg_540 <= grp_sqrt_fixed_32_32_s_fu_235_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                sext_ln44_reg_520 <= sext_ln44_fu_343_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_ln43_fu_294_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                sub_ln44_reg_496 <= sub_ln44_fu_299_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                xf_V_2_reg_535 <= xf_V_2_fu_354_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                    zext_ln33_1_cast_reg_461(8 downto 0) <= zext_ln33_1_cast_fu_252_p1(8 downto 0);
            end if;
        end if;
    end process;
    zext_ln33_1_cast_reg_461(9) <= '0';
    trunc_ln54_cast_reg_477(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln42_fu_269_p2, or_ln43_fu_294_p2, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_block_state6_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln42_fu_269_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((or_ln43_fu_294_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_boolean_0 = ap_block_state6_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    abscond_fu_309_p2 <= "1" when (signed(sub_ln44_reg_496) > signed(ap_const_lv10_0)) else "0";
    add_ln42_fu_275_p2 <= std_logic_vector(unsigned(candidate_fu_98) + unsigned(ap_const_lv9_1));
    add_ln54_fu_407_p2 <= std_logic_vector(unsigned(mul_ln37) + unsigned(trunc_ln54_fu_403_p1));
    add_ln55_fu_417_p2 <= std_logic_vector(unsigned(empty_fu_102) + unsigned(ap_const_lv32_1));
    and_ln53_fu_397_p2 <= (or_ln53_fu_393_p2 and grp_fu_243_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_ST_fsm_state6_blk_assign_proc : process(ap_block_state6_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state6_on_subcall_done)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state6_on_subcall_done_assign_proc : process(grp_pow_32_32_s_fu_177_ap_done, grp_pow_32_32_s_fu_206_ap_done)
    begin
                ap_block_state6_on_subcall_done <= ((grp_pow_32_32_s_fu_206_ap_done = ap_const_logic_0) or (grp_pow_32_32_s_fu_177_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln42_fu_269_p2)
    begin
        if ((((icmp_ln42_fu_269_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln42_fu_269_p2)
    begin
        if (((icmp_ln42_fu_269_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln53_fu_364_p1 <= euclidean_distance_reg_550;
    candidate_cast_fu_291_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(candidate_fu_98),10));
    clusters_members_address0 <= zext_ln54_fu_412_p1(17 - 1 downto 0);

    clusters_members_ce0_assign_proc : process(ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            clusters_members_ce0 <= ap_const_logic_1;
        else 
            clusters_members_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    clusters_members_d0 <= candidate_fu_98;

    clusters_members_we0_assign_proc : process(or_ln43_reg_492, and_ln53_reg_566, ap_CS_fsm_state25)
    begin
        if (((or_ln43_reg_492 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln53_reg_566) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            clusters_members_we0 <= ap_const_logic_1;
        else 
            clusters_members_we0 <= ap_const_logic_0;
        end if; 
    end process;

    delta_angle_2_fu_336_p3 <= 
        sub_ln46_fu_331_p2 when (icmp_ln45_fu_326_p2(0) = '1') else 
        delta_angle_reg_508;
    delta_angle_fu_314_p3 <= 
        sub_ln44_reg_496 when (abscond_fu_309_p2(0) = '1') else 
        neg_fu_304_p2;
    distances_address0 <= trunc_ln54_cast_reg_477(9 - 1 downto 0);

    distances_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            distances_ce0 <= ap_const_logic_1;
        else 
            distances_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    grouped_address0_assign_proc : process(ap_CS_fsm_state2, trunc_ln54_cast_fu_281_p1, grouped_addr_reg_482, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grouped_address0 <= grouped_addr_reg_482;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grouped_address0 <= trunc_ln54_cast_fu_281_p1(9 - 1 downto 0);
        else 
            grouped_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    grouped_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            grouped_ce0 <= ap_const_logic_1;
        else 
            grouped_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grouped_d0 <= ap_const_lv1_1;

    grouped_we0_assign_proc : process(or_ln43_reg_492, and_ln53_reg_566, ap_CS_fsm_state25)
    begin
        if (((or_ln43_reg_492 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln53_reg_566) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            grouped_we0 <= ap_const_logic_1;
        else 
            grouped_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_240_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_46_reg_540),32));
    grp_pow_32_32_s_fu_177_ap_start <= grp_pow_32_32_s_fu_177_ap_start_reg;
    grp_pow_32_32_s_fu_206_ap_start <= grp_pow_32_32_s_fu_206_ap_start_reg;
    icmp_ln42_fu_269_p2 <= "1" when (candidate_fu_98 = ap_const_lv9_168) else "0";
    icmp_ln43_fu_286_p2 <= "1" when (candidate_fu_98 = put) else "0";
    icmp_ln45_fu_326_p2 <= "1" when (signed(delta_angle_reg_508) > signed(ap_const_lv10_B4)) else "0";
    icmp_ln53_1_fu_387_p2 <= "1" when (trunc_ln53_fu_377_p1 = ap_const_lv23_0) else "0";
    icmp_ln53_fu_381_p2 <= "0" when (tmp_fu_367_p4 = ap_const_lv8_FF) else "1";
    neg_fu_304_p2 <= std_logic_vector(unsigned(ap_const_lv10_0) - unsigned(sub_ln44_reg_496));
    or_ln43_fu_294_p2 <= (icmp_ln43_reg_487 or grouped_q0);
    or_ln53_fu_393_p2 <= (icmp_ln53_reg_556 or icmp_ln53_1_reg_561);
    p_out <= empty_fu_102;

    p_out_ap_vld_assign_proc : process(ap_CS_fsm_state2, icmp_ln42_fu_269_p2)
    begin
        if (((icmp_ln42_fu_269_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            p_out_ap_vld <= ap_const_logic_1;
        else 
            p_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln44_fu_343_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(delta_angle_2_fu_336_p3),32));

    sub_ln44_fu_299_p2 <= std_logic_vector(unsigned(candidate_cast_fu_291_p1) - unsigned(zext_ln33_1_cast_reg_461));
    sub_ln46_fu_331_p2 <= std_logic_vector(unsigned(ap_const_lv10_168) - unsigned(delta_angle_reg_508));
    tmp_fu_367_p4 <= bitcast_ln53_fu_364_p1(30 downto 23);
    trunc_ln53_fu_377_p1 <= bitcast_ln53_fu_364_p1(23 - 1 downto 0);
    trunc_ln54_cast_fu_281_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(candidate_fu_98),64));
    trunc_ln54_fu_403_p1 <= empty_fu_102(17 - 1 downto 0);
    xf_V_1_fu_321_p2 <= std_logic_vector(unsigned(distances_load) - unsigned(distances_q0));
    xf_V_2_fu_354_p2 <= std_logic_vector(unsigned(zext_ln987_1_fu_351_p1) + unsigned(zext_ln987_fu_348_p1));
    zext_ln33_1_cast_fu_252_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln33_1),10));
    zext_ln54_fu_412_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln54_fu_407_p2),64));
    zext_ln987_1_fu_351_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_45_reg_530),32));
    zext_ln987_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_s_reg_525),32));
end behav;
