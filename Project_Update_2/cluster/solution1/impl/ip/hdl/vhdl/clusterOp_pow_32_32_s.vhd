-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity clusterOp_pow_32_32_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (30 downto 0) );
end;


architecture behav of clusterOp_pow_32_32_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (25 downto 0) := "00000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (25 downto 0) := "00000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (25 downto 0) := "00000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (25 downto 0) := "00000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (25 downto 0) := "00000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (25 downto 0) := "00000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (25 downto 0) := "00001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (25 downto 0) := "00010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (25 downto 0) := "00100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (25 downto 0) := "01000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (25 downto 0) := "10000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv33_0 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv66_0 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal icmp_ln1653_fu_108_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1653_reg_169 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln180_fu_142_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal select_ln180_reg_173 : STD_LOGIC_VECTOR (32 downto 0);
    signal x_l_V_fu_150_p3 : STD_LOGIC_VECTOR (98 downto 0);
    signal x_l_V_reg_178 : STD_LOGIC_VECTOR (98 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_log_99_33_s_fu_73_ap_start : STD_LOGIC;
    signal grp_log_99_33_s_fu_73_ap_done : STD_LOGIC;
    signal grp_log_99_33_s_fu_73_ap_idle : STD_LOGIC;
    signal grp_log_99_33_s_fu_73_ap_ready : STD_LOGIC;
    signal grp_log_99_33_s_fu_73_ap_return : STD_LOGIC_VECTOR (71 downto 0);
    signal grp_exp_core_32_32_66_s_fu_92_ap_start : STD_LOGIC;
    signal grp_exp_core_32_32_66_s_fu_92_ap_done : STD_LOGIC;
    signal grp_exp_core_32_32_66_s_fu_92_ap_idle : STD_LOGIC;
    signal grp_exp_core_32_32_66_s_fu_92_ap_ready : STD_LOGIC;
    signal grp_exp_core_32_32_66_s_fu_92_ap_ce : STD_LOGIC;
    signal grp_exp_core_32_32_66_s_fu_92_x : STD_LOGIC_VECTOR (40 downto 0);
    signal grp_exp_core_32_32_66_s_fu_92_ap_return : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_phi_mux_this_V_write_assign_phi_fu_66_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal this_V_write_assign_reg_62 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_log_99_33_s_fu_73_ap_start_reg : STD_LOGIC := '0';
    signal grp_exp_core_32_32_66_s_fu_92_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_NS_fsm_state3 : STD_LOGIC;
    signal icmp_ln1653_fu_108_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_97_fu_114_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln813_fu_122_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln813_fu_122_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Val2_s_fu_126_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Result_97_fu_114_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_fu_132_p4 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component clusterOp_log_99_33_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x : IN STD_LOGIC_VECTOR (98 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (71 downto 0) );
    end component;


    component clusterOp_exp_core_32_32_66_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        x : IN STD_LOGIC_VECTOR (40 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;



begin
    grp_log_99_33_s_fu_73 : component clusterOp_log_99_33_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_log_99_33_s_fu_73_ap_start,
        ap_done => grp_log_99_33_s_fu_73_ap_done,
        ap_idle => grp_log_99_33_s_fu_73_ap_idle,
        ap_ready => grp_log_99_33_s_fu_73_ap_ready,
        x => x_l_V_reg_178,
        ap_return => grp_log_99_33_s_fu_73_ap_return);

    grp_exp_core_32_32_66_s_fu_92 : component clusterOp_exp_core_32_32_66_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_exp_core_32_32_66_s_fu_92_ap_start,
        ap_done => grp_exp_core_32_32_66_s_fu_92_ap_done,
        ap_idle => grp_exp_core_32_32_66_s_fu_92_ap_idle,
        ap_ready => grp_exp_core_32_32_66_s_fu_92_ap_ready,
        ap_ce => grp_exp_core_32_32_66_s_fu_92_ap_ce,
        x => grp_exp_core_32_32_66_s_fu_92_x,
        ap_return => grp_exp_core_32_32_66_s_fu_92_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv31_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                    ap_return_preg <= ap_phi_mux_this_V_write_assign_phi_fu_66_p4;
                end if; 
            end if;
        end if;
    end process;


    grp_exp_core_32_32_66_s_fu_92_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_exp_core_32_32_66_s_fu_92_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_1 = ap_NS_fsm_state3))) then 
                    grp_exp_core_32_32_66_s_fu_92_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_exp_core_32_32_66_s_fu_92_ap_ready = ap_const_logic_1)) then 
                    grp_exp_core_32_32_66_s_fu_92_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_log_99_33_s_fu_73_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_log_99_33_s_fu_73_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_log_99_33_s_fu_73_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_log_99_33_s_fu_73_ap_ready = ap_const_logic_1)) then 
                    grp_log_99_33_s_fu_73_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    this_V_write_assign_reg_62_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1653_fu_108_p2 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                this_V_write_assign_reg_62 <= ap_const_lv31_0;
            elsif (((icmp_ln1653_reg_169 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
                this_V_write_assign_reg_62 <= grp_exp_core_32_32_66_s_fu_92_ap_return;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                icmp_ln1653_reg_169 <= icmp_ln1653_fu_108_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1653_fu_108_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                select_ln180_reg_173 <= select_ln180_fu_142_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    x_l_V_reg_178(98 downto 66) <= x_l_V_fu_150_p3(98 downto 66);
            end if;
        end if;
    end process;
    x_l_V_reg_178(65 downto 0) <= "000000000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln1653_fu_108_p2, grp_log_99_33_s_fu_73_ap_done, ap_CS_fsm_state3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((icmp_ln1653_fu_108_p2 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                elsif (((icmp_ln1653_fu_108_p2 = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((grp_log_99_33_s_fu_73_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_NS_fsm_state3 <= ap_NS_fsm(2);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(grp_log_99_33_s_fu_73_ap_done)
    begin
        if ((grp_log_99_33_s_fu_73_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_this_V_write_assign_phi_fu_66_p4_assign_proc : process(icmp_ln1653_reg_169, grp_exp_core_32_32_66_s_fu_92_ap_return, ap_CS_fsm_state26, this_V_write_assign_reg_62)
    begin
        if (((icmp_ln1653_reg_169 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            ap_phi_mux_this_V_write_assign_phi_fu_66_p4 <= grp_exp_core_32_32_66_s_fu_92_ap_return;
        else 
            ap_phi_mux_this_V_write_assign_phi_fu_66_p4 <= this_V_write_assign_reg_62;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_state26, ap_phi_mux_this_V_write_assign_phi_fu_66_p4, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            ap_return <= ap_phi_mux_this_V_write_assign_phi_fu_66_p4;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;


    grp_exp_core_32_32_66_s_fu_92_ap_ce_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, grp_log_99_33_s_fu_73_ap_done, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1) or ((grp_log_99_33_s_fu_73_ap_done = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            grp_exp_core_32_32_66_s_fu_92_ap_ce <= ap_const_logic_0;
        else 
            grp_exp_core_32_32_66_s_fu_92_ap_ce <= ap_const_logic_1;
        end if; 
    end process;

    grp_exp_core_32_32_66_s_fu_92_ap_start <= grp_exp_core_32_32_66_s_fu_92_ap_start_reg;
    grp_exp_core_32_32_66_s_fu_92_x <= grp_log_99_33_s_fu_73_ap_return(71 downto 31);
    grp_log_99_33_s_fu_73_ap_start <= grp_log_99_33_s_fu_73_ap_start_reg;
    icmp_ln1653_fu_108_p0 <= x;
    icmp_ln1653_fu_108_p2 <= "1" when (icmp_ln1653_fu_108_p0 = ap_const_lv32_0) else "0";
    p_Result_97_fu_114_p1 <= x;
    p_Result_97_fu_114_p3 <= p_Result_97_fu_114_p1(31 downto 31);
    
    p_Result_s_fu_132_p4_proc : process(p_Val2_s_fu_126_p2)
    begin
        p_Result_s_fu_132_p4 <= p_Val2_s_fu_126_p2;
        p_Result_s_fu_132_p4(32) <= ap_const_lv1_0(0);
    end process;

    p_Val2_s_fu_126_p2 <= std_logic_vector(unsigned(ap_const_lv33_0) - unsigned(sext_ln813_fu_122_p1));
    select_ln180_fu_142_p3 <= 
        p_Result_s_fu_132_p4 when (p_Result_97_fu_114_p3(0) = '1') else 
        sext_ln813_fu_122_p1;
    sext_ln813_fu_122_p0 <= x;
        sext_ln813_fu_122_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln813_fu_122_p0),33));

    x_l_V_fu_150_p3 <= (select_ln180_reg_173 & ap_const_lv66_0);
end behav;
