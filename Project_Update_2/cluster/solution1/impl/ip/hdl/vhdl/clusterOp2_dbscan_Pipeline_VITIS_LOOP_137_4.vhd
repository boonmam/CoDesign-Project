-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity clusterOp2_dbscan_Pipeline_VITIS_LOOP_137_4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    neighbor_id : IN STD_LOGIC_VECTOR (8 downto 0);
    data_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    data_ce0 : OUT STD_LOGIC;
    data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    mul_ln97_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    mul_ln98_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    new_neighbor_count_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    new_neighbor_count_out_ap_vld : OUT STD_LOGIC;
    sin_values_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    sin_values_ce0 : OUT STD_LOGIC;
    sin_values_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
    cos_values_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    cos_values_ce0 : OUT STD_LOGIC;
    cos_values_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
    grp_fu_335_p_din0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    grp_fu_335_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_335_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_335_p_ce : OUT STD_LOGIC;
    grp_fu_345_p_din0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    grp_fu_345_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_345_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_345_p_ce : OUT STD_LOGIC;
    grp_sqrt_fixed_32_32_s_fu_664_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_sqrt_fixed_32_32_s_fu_664_p_dout0 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of clusterOp2_dbscan_Pipeline_VITIS_LOOP_137_4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv9_168 : STD_LOGIC_VECTOR (8 downto 0) := "101101000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv16_12D : STD_LOGIC_VECTOR (15 downto 0) := "0000000100101101";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln137_fu_146_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln137_reg_297 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_reg_297_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_reg_297_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_reg_297_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_reg_297_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_reg_297_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_reg_297_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_reg_297_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_reg_297_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_reg_297_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_reg_297_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_reg_297_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_reg_297_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_reg_297_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_reg_297_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_reg_297_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_reg_297_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln138_fu_165_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln138_reg_301 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln138_reg_301_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln138_reg_301_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln138_reg_301_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln138_reg_301_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln138_reg_301_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln138_reg_301_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln138_reg_301_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln138_reg_301_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln138_reg_301_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln138_reg_301_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln138_reg_301_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln138_reg_301_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln138_reg_301_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln138_reg_301_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln138_reg_301_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln138_reg_301_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln138_reg_301_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal data_load_reg_320 : STD_LOGIC_VECTOR (31 downto 0);
    signal sin_values_load_reg_326 : STD_LOGIC_VECTOR (17 downto 0);
    signal cos_values_load_reg_331 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln97_fu_176_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln98_fu_184_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln97_reg_346 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln98_reg_351 : STD_LOGIC_VECTOR (31 downto 0);
    signal dx_reg_356 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln98_1_fu_220_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln97_1_fu_224_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_258_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_264_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xf_V_reg_378 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_reg_383 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal l_cast_fu_158_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal l_fu_56 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln137_fu_152_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_l_1 : STD_LOGIC_VECTOR (8 downto 0);
    signal new_neighbor_count_fu_60 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_neighbor_count_1_fu_241_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal sub_ln97_fu_192_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln98_fu_206_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal dy_fu_210_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln144_fu_230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln145_fu_235_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_258_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_258_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_264_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_264_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component clusterOp2_sqrt_fixed_32_32_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        x : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component clusterOp2_mul_18s_32s_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component clusterOp2_mul_mul_16s_16s_32_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component clusterOp2_mac_muladd_16s_16s_32s_32_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component clusterOp2_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_mul_16s_16s_32_4_1_U27 : component clusterOp2_mul_mul_16s_16s_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_258_p0,
        din1 => grp_fu_258_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_258_p2);

    mac_muladd_16s_16s_32s_32_4_1_U28 : component clusterOp2_mac_muladd_16s_16s_32s_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_264_p0,
        din1 => grp_fu_264_p1,
        din2 => grp_fu_258_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_264_p3);

    flow_control_loop_pipe_sequential_init_U : component clusterOp2_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter17_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    l_fu_56_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln137_fu_146_p2 = ap_const_lv1_0))) then 
                    l_fu_56 <= add_ln137_fu_152_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    l_fu_56 <= ap_const_lv9_0;
                end if;
            end if; 
        end if;
    end process;

    new_neighbor_count_fu_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    new_neighbor_count_fu_60 <= ap_const_lv32_0;
                elsif (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (icmp_ln138_reg_301_pp0_iter17_reg = ap_const_lv1_0))) then 
                    new_neighbor_count_fu_60 <= new_neighbor_count_1_fu_241_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                icmp_ln137_reg_297_pp0_iter10_reg <= icmp_ln137_reg_297_pp0_iter9_reg;
                icmp_ln137_reg_297_pp0_iter11_reg <= icmp_ln137_reg_297_pp0_iter10_reg;
                icmp_ln137_reg_297_pp0_iter12_reg <= icmp_ln137_reg_297_pp0_iter11_reg;
                icmp_ln137_reg_297_pp0_iter13_reg <= icmp_ln137_reg_297_pp0_iter12_reg;
                icmp_ln137_reg_297_pp0_iter14_reg <= icmp_ln137_reg_297_pp0_iter13_reg;
                icmp_ln137_reg_297_pp0_iter15_reg <= icmp_ln137_reg_297_pp0_iter14_reg;
                icmp_ln137_reg_297_pp0_iter16_reg <= icmp_ln137_reg_297_pp0_iter15_reg;
                icmp_ln137_reg_297_pp0_iter2_reg <= icmp_ln137_reg_297_pp0_iter1_reg;
                icmp_ln137_reg_297_pp0_iter3_reg <= icmp_ln137_reg_297_pp0_iter2_reg;
                icmp_ln137_reg_297_pp0_iter4_reg <= icmp_ln137_reg_297_pp0_iter3_reg;
                icmp_ln137_reg_297_pp0_iter5_reg <= icmp_ln137_reg_297_pp0_iter4_reg;
                icmp_ln137_reg_297_pp0_iter6_reg <= icmp_ln137_reg_297_pp0_iter5_reg;
                icmp_ln137_reg_297_pp0_iter7_reg <= icmp_ln137_reg_297_pp0_iter6_reg;
                icmp_ln137_reg_297_pp0_iter8_reg <= icmp_ln137_reg_297_pp0_iter7_reg;
                icmp_ln137_reg_297_pp0_iter9_reg <= icmp_ln137_reg_297_pp0_iter8_reg;
                icmp_ln138_reg_301_pp0_iter10_reg <= icmp_ln138_reg_301_pp0_iter9_reg;
                icmp_ln138_reg_301_pp0_iter11_reg <= icmp_ln138_reg_301_pp0_iter10_reg;
                icmp_ln138_reg_301_pp0_iter12_reg <= icmp_ln138_reg_301_pp0_iter11_reg;
                icmp_ln138_reg_301_pp0_iter13_reg <= icmp_ln138_reg_301_pp0_iter12_reg;
                icmp_ln138_reg_301_pp0_iter14_reg <= icmp_ln138_reg_301_pp0_iter13_reg;
                icmp_ln138_reg_301_pp0_iter15_reg <= icmp_ln138_reg_301_pp0_iter14_reg;
                icmp_ln138_reg_301_pp0_iter16_reg <= icmp_ln138_reg_301_pp0_iter15_reg;
                icmp_ln138_reg_301_pp0_iter17_reg <= icmp_ln138_reg_301_pp0_iter16_reg;
                icmp_ln138_reg_301_pp0_iter2_reg <= icmp_ln138_reg_301_pp0_iter1_reg;
                icmp_ln138_reg_301_pp0_iter3_reg <= icmp_ln138_reg_301_pp0_iter2_reg;
                icmp_ln138_reg_301_pp0_iter4_reg <= icmp_ln138_reg_301_pp0_iter3_reg;
                icmp_ln138_reg_301_pp0_iter5_reg <= icmp_ln138_reg_301_pp0_iter4_reg;
                icmp_ln138_reg_301_pp0_iter6_reg <= icmp_ln138_reg_301_pp0_iter5_reg;
                icmp_ln138_reg_301_pp0_iter7_reg <= icmp_ln138_reg_301_pp0_iter6_reg;
                icmp_ln138_reg_301_pp0_iter8_reg <= icmp_ln138_reg_301_pp0_iter7_reg;
                icmp_ln138_reg_301_pp0_iter9_reg <= icmp_ln138_reg_301_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln137_reg_297 <= icmp_ln137_fu_146_p2;
                icmp_ln137_reg_297_pp0_iter1_reg <= icmp_ln137_reg_297;
                icmp_ln138_reg_301_pp0_iter1_reg <= icmp_ln138_reg_301;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln138_reg_301 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                cos_values_load_reg_331 <= cos_values_q0;
                data_load_reg_320 <= data_q0;
                sin_values_load_reg_326 <= sin_values_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln138_reg_301_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                dx_reg_356 <= sub_ln97_fu_192_p2(31 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln137_fu_146_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln138_reg_301 <= icmp_ln138_fu_165_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln138_reg_301_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                mul_ln97_reg_346 <= grp_fu_335_p_dout0;
                mul_ln98_reg_351 <= grp_fu_345_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln138_reg_301_pp0_iter16_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p_Val2_s_reg_383 <= grp_sqrt_fixed_32_32_s_fu_664_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (icmp_ln138_reg_301_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                xf_V_reg_378 <= grp_fu_264_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln137_fu_152_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_l_1) + unsigned(ap_const_lv9_1));
    add_ln145_fu_235_p2 <= std_logic_vector(unsigned(new_neighbor_count_fu_60) + unsigned(ap_const_lv32_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln137_fu_146_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln137_fu_146_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter17_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter17_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_l_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, l_fu_56, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_l_1 <= ap_const_lv9_0;
        else 
            ap_sig_allocacmp_l_1 <= l_fu_56;
        end if; 
    end process;

    cos_values_address0 <= l_cast_fu_158_p1(9 - 1 downto 0);

    cos_values_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cos_values_ce0 <= ap_const_logic_1;
        else 
            cos_values_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_address0 <= l_cast_fu_158_p1(9 - 1 downto 0);

    data_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_ce0 <= ap_const_logic_1;
        else 
            data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dy_fu_210_p4 <= sub_ln98_fu_206_p2(31 downto 16);
    grp_fu_258_p0 <= sext_ln98_1_fu_220_p1(16 - 1 downto 0);
    grp_fu_258_p1 <= sext_ln98_1_fu_220_p1(16 - 1 downto 0);
    grp_fu_264_p0 <= sext_ln97_1_fu_224_p1(16 - 1 downto 0);
    grp_fu_264_p1 <= sext_ln97_1_fu_224_p1(16 - 1 downto 0);
    grp_fu_335_p_ce <= ap_const_logic_1;
    grp_fu_335_p_din0 <= sext_ln97_fu_176_p1(18 - 1 downto 0);
    grp_fu_335_p_din1 <= data_load_reg_320;
    grp_fu_345_p_ce <= ap_const_logic_1;
    grp_fu_345_p_din0 <= sext_ln98_fu_184_p1(18 - 1 downto 0);
    grp_fu_345_p_din1 <= data_load_reg_320;
    grp_sqrt_fixed_32_32_s_fu_664_p_din1 <= xf_V_reg_378;
    icmp_ln137_fu_146_p2 <= "1" when (ap_sig_allocacmp_l_1 = ap_const_lv9_168) else "0";
    icmp_ln138_fu_165_p2 <= "1" when (ap_sig_allocacmp_l_1 = neighbor_id) else "0";
    icmp_ln144_fu_230_p2 <= "1" when (unsigned(p_Val2_s_reg_383) < unsigned(ap_const_lv16_12D)) else "0";
    l_cast_fu_158_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_l_1),64));
    new_neighbor_count_1_fu_241_p3 <= 
        add_ln145_fu_235_p2 when (icmp_ln144_fu_230_p2(0) = '1') else 
        new_neighbor_count_fu_60;
    new_neighbor_count_out <= new_neighbor_count_fu_60;

    new_neighbor_count_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln137_reg_297_pp0_iter16_reg)
    begin
        if (((icmp_ln137_reg_297_pp0_iter16_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            new_neighbor_count_out_ap_vld <= ap_const_logic_1;
        else 
            new_neighbor_count_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln97_1_fu_224_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(dx_reg_356),32));

        sext_ln97_fu_176_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sin_values_load_reg_326),32));

        sext_ln98_1_fu_220_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(dy_fu_210_p4),32));

        sext_ln98_fu_184_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(cos_values_load_reg_331),32));

    sin_values_address0 <= l_cast_fu_158_p1(9 - 1 downto 0);

    sin_values_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            sin_values_ce0 <= ap_const_logic_1;
        else 
            sin_values_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln97_fu_192_p2 <= std_logic_vector(unsigned(mul_ln97_2) - unsigned(mul_ln97_reg_346));
    sub_ln98_fu_206_p2 <= std_logic_vector(unsigned(mul_ln98_2) - unsigned(mul_ln98_reg_351));
end behav;
