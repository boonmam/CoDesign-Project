-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity clusterOp_sin_or_cos_double_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    t_in : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of clusterOp_sin_or_cos_double_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_3FE : STD_LOGIC_VECTOR (10 downto 0) := "01111111110";
    constant ap_const_lv11_44D : STD_LOGIC_VECTOR (10 downto 0) := "10001001101";
    constant ap_const_lv11_4A : STD_LOGIC_VECTOR (10 downto 0) := "00001001010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_A6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100110";
    constant ap_const_lv32_A7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100111";
    constant ap_const_lv32_A9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101001";
    constant ap_const_lv124_0 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_7B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111011";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv11_403 : STD_LOGIC_VECTOR (10 downto 0) := "10000000011";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv32_6B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101011";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv63_7FFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (62 downto 0) := "111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_7D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111101";
    constant ap_const_lv32_6E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101110";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv32_6D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101101";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv16_8000 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv17_10000 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv12_3FF : STD_LOGIC_VECTOR (11 downto 0) := "001111111111";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv52_FFFFFFFFFFFFF : STD_LOGIC_VECTOR (51 downto 0) := "1111111111111111111111111111111111111111111111111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter32 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter24 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter25 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter26 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter27 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter28 : BOOLEAN;
    signal ap_block_state30_pp0_stage0_iter29 : BOOLEAN;
    signal ap_block_state31_pp0_stage0_iter30 : BOOLEAN;
    signal ap_block_state32_pp0_stage0_iter31 : BOOLEAN;
    signal ap_block_state33_pp0_stage0_iter32 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ref_4oPi_table_256_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal ref_4oPi_table_256_V_ce0 : STD_LOGIC;
    signal ref_4oPi_table_256_V_q0 : STD_LOGIC_VECTOR (255 downto 0);
    signal fourth_order_double_sin_cos_K0_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal fourth_order_double_sin_cos_K0_V_ce0 : STD_LOGIC;
    signal fourth_order_double_sin_cos_K0_V_q0 : STD_LOGIC_VECTOR (58 downto 0);
    signal fourth_order_double_sin_cos_K1_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal fourth_order_double_sin_cos_K1_V_ce0 : STD_LOGIC;
    signal fourth_order_double_sin_cos_K1_V_q0 : STD_LOGIC_VECTOR (51 downto 0);
    signal fourth_order_double_sin_cos_K2_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal fourth_order_double_sin_cos_K2_V_ce0 : STD_LOGIC;
    signal fourth_order_double_sin_cos_K2_V_q0 : STD_LOGIC_VECTOR (43 downto 0);
    signal fourth_order_double_sin_cos_K3_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal fourth_order_double_sin_cos_K3_V_ce0 : STD_LOGIC;
    signal fourth_order_double_sin_cos_K3_V_q0 : STD_LOGIC_VECTOR (32 downto 0);
    signal fourth_order_double_sin_cos_K4_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal fourth_order_double_sin_cos_K4_V_ce0 : STD_LOGIC;
    signal fourth_order_double_sin_cos_K4_V_q0 : STD_LOGIC_VECTOR (24 downto 0);
    signal p_Result_11_reg_1421 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal p_Result_11_reg_1421_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_11_reg_1421_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_11_reg_1421_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_11_reg_1421_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_11_reg_1421_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_11_reg_1421_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_11_reg_1421_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_11_reg_1421_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_exp_V_fu_306_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal din_exp_V_reg_1426 : STD_LOGIC_VECTOR (10 downto 0);
    signal din_exp_V_reg_1426_pp0_iter1_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal din_exp_V_reg_1426_pp0_iter2_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal din_exp_V_reg_1426_pp0_iter3_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal din_exp_V_reg_1426_pp0_iter4_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal din_exp_V_reg_1426_pp0_iter5_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal din_exp_V_reg_1426_pp0_iter6_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal din_exp_V_reg_1426_pp0_iter7_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal din_exp_V_reg_1426_pp0_iter8_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal closepath_fu_320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal closepath_reg_1433 : STD_LOGIC_VECTOR (0 downto 0);
    signal closepath_reg_1433_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal closepath_reg_1433_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal closepath_reg_1433_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal closepath_reg_1433_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal closepath_reg_1433_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal closepath_reg_1433_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal closepath_reg_1433_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal closepath_reg_1433_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_12_fu_326_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_12_reg_1440 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_12_reg_1440_pp0_iter1_reg : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_12_reg_1440_pp0_iter2_reg : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln628_fu_359_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln628_reg_1450 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln628_reg_1450_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln1019_1_fu_363_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_reg_1455 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_reg_1455_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_reg_1455_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_reg_1455_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_reg_1455_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_reg_1455_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_reg_1455_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_reg_1455_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_reg_1455_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_reg_1455_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_reg_1455_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_reg_1455_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_reg_1455_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_reg_1455_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_reg_1455_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_reg_1455_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_reg_1455_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_reg_1455_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_reg_1455_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_reg_1455_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_reg_1455_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_reg_1455_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_reg_1455_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_reg_1455_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_reg_1455_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_reg_1455_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_reg_1455_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_reg_1455_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_reg_1455_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_reg_1455_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_reg_1455_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_reg_1455_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal table_256_V_reg_1461 : STD_LOGIC_VECTOR (255 downto 0);
    signal Med_V_reg_1466 : STD_LOGIC_VECTOR (169 downto 0);
    signal grp_fu_398_p2 : STD_LOGIC_VECTOR (169 downto 0);
    signal ret_V_5_reg_1476 : STD_LOGIC_VECTOR (169 downto 0);
    signal Mx_bits_V_reg_1481 : STD_LOGIC_VECTOR (123 downto 0);
    signal k_V_reg_1487 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_V_reg_1487_pp0_iter8_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal Mx_bits_V_3_fu_446_p3 : STD_LOGIC_VECTOR (123 downto 0);
    signal Mx_bits_V_3_reg_1492 : STD_LOGIC_VECTOR (123 downto 0);
    signal Mx_zeros_fu_501_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal Mx_zeros_reg_1497 : STD_LOGIC_VECTOR (6 downto 0);
    signal Mx_V_reg_1503 : STD_LOGIC_VECTOR (62 downto 0);
    signal Mx_V_reg_1503_pp0_iter10_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal Mx_V_reg_1503_pp0_iter11_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal Mx_V_reg_1503_pp0_iter12_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal Mx_V_reg_1503_pp0_iter13_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal Mx_V_reg_1503_pp0_iter14_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal Mx_V_reg_1503_pp0_iter15_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal Mx_V_reg_1503_pp0_iter16_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal Mx_V_reg_1503_pp0_iter17_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal Mx_V_reg_1503_pp0_iter18_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal Mx_V_reg_1503_pp0_iter19_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal Mx_V_reg_1503_pp0_iter20_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal Mx_V_reg_1503_pp0_iter21_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal Mx_V_reg_1503_pp0_iter22_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal Ex_V_3_fu_544_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_3_reg_1510 : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_3_reg_1510_pp0_iter10_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_3_reg_1510_pp0_iter11_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_3_reg_1510_pp0_iter12_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_3_reg_1510_pp0_iter13_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_3_reg_1510_pp0_iter14_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_3_reg_1510_pp0_iter15_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_3_reg_1510_pp0_iter16_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_3_reg_1510_pp0_iter17_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_3_reg_1510_pp0_iter18_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_3_reg_1510_pp0_iter19_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_3_reg_1510_pp0_iter20_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_3_reg_1510_pp0_iter21_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_3_reg_1510_pp0_iter22_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_3_reg_1510_pp0_iter23_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_3_reg_1510_pp0_iter24_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_3_reg_1510_pp0_iter25_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_3_reg_1510_pp0_iter26_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_3_reg_1510_pp0_iter27_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_3_reg_1510_pp0_iter28_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_3_reg_1510_pp0_iter29_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_3_reg_1510_pp0_iter30_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_reg_1516 : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_basis_fu_558_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_basis_reg_1522 : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_basis_reg_1522_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_basis_reg_1522_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_basis_reg_1522_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_basis_reg_1522_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_basis_reg_1522_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_basis_reg_1522_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_basis_reg_1522_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_basis_reg_1522_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_basis_reg_1522_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_basis_reg_1522_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_basis_reg_1522_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_basis_reg_1522_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_basis_reg_1522_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_basis_reg_1522_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_basis_reg_1522_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_basis_reg_1522_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_basis_reg_1522_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_basis_reg_1522_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_basis_reg_1522_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_basis_reg_1522_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_basis_reg_1522_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_fu_671_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_reg_1529 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_reg_1529_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_reg_1529_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_reg_1529_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_reg_1529_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_reg_1529_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_reg_1529_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_reg_1529_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_reg_1529_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_reg_1529_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_reg_1529_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_reg_1529_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_reg_1529_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_reg_1529_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_reg_1529_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_reg_1529_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_reg_1529_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_reg_1529_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_reg_1529_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_reg_1529_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_reg_1529_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_reg_1529_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_reg_1529_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln300_fu_676_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln300_reg_1534 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln300_reg_1534_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln300_reg_1534_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln300_reg_1534_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln300_reg_1534_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln300_reg_1534_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln300_reg_1534_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln300_reg_1534_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln300_reg_1534_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln300_reg_1534_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln300_reg_1534_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln300_reg_1534_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln300_reg_1534_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln300_reg_1534_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln300_reg_1534_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln300_reg_1534_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln300_reg_1534_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln300_reg_1534_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln300_reg_1534_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln300_reg_1534_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln300_reg_1534_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln300_reg_1534_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_fu_686_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_reg_1539 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_reg_1539_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_reg_1539_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_reg_1539_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_reg_1539_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_reg_1539_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_reg_1539_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_reg_1539_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_reg_1539_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_reg_1539_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_reg_1539_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_reg_1539_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_reg_1539_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_reg_1539_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_reg_1539_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_reg_1539_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_reg_1539_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_reg_1539_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_reg_1539_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_reg_1539_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_reg_1539_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_reg_1539_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_reg_1539_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_1_fu_698_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_1_reg_1545 : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_1_reg_1545_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_1_reg_1545_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_1_reg_1545_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_1_reg_1545_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_1_reg_1545_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_1_reg_1545_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_1_reg_1545_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_1_reg_1545_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_1_reg_1545_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_1_reg_1545_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_1_reg_1545_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_1_reg_1545_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_1_reg_1545_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_1_reg_1545_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_1_reg_1545_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_1_reg_1545_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_1_reg_1545_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_1_reg_1545_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_1_reg_1545_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_1_reg_1545_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_1_reg_1545_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_1_reg_1545_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_1550 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_2_reg_1550_pp0_iter11_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_2_reg_1550_pp0_iter12_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_2_reg_1550_pp0_iter13_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal B_V_fu_755_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal B_V_reg_1555 : STD_LOGIC_VECTOR (55 downto 0);
    signal B_V_reg_1555_pp0_iter11_reg : STD_LOGIC_VECTOR (55 downto 0);
    signal B_V_reg_1555_pp0_iter12_reg : STD_LOGIC_VECTOR (55 downto 0);
    signal B_V_reg_1555_pp0_iter13_reg : STD_LOGIC_VECTOR (55 downto 0);
    signal B_V_reg_1555_pp0_iter14_reg : STD_LOGIC_VECTOR (55 downto 0);
    signal B_V_reg_1555_pp0_iter15_reg : STD_LOGIC_VECTOR (55 downto 0);
    signal B_trunc_reg_1560 : STD_LOGIC_VECTOR (48 downto 0);
    signal zext_ln1271_fu_769_p1 : STD_LOGIC_VECTOR (97 downto 0);
    signal zext_ln1271_reg_1565 : STD_LOGIC_VECTOR (97 downto 0);
    signal zext_ln1271_reg_1565_pp0_iter12_reg : STD_LOGIC_VECTOR (97 downto 0);
    signal zext_ln1271_reg_1565_pp0_iter13_reg : STD_LOGIC_VECTOR (97 downto 0);
    signal zext_ln1271_reg_1565_pp0_iter14_reg : STD_LOGIC_VECTOR (97 downto 0);
    signal zext_ln1271_reg_1565_pp0_iter15_reg : STD_LOGIC_VECTOR (97 downto 0);
    signal zext_ln541_fu_784_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln541_reg_1572 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln541_reg_1572_pp0_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln541_reg_1572_pp0_iter16_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln541_reg_1572_pp0_iter17_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln541_reg_1572_pp0_iter18_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal B_squared_V_reg_1589 : STD_LOGIC_VECTOR (48 downto 0);
    signal fourth_order_double_sin_cos_K1_V_load_reg_1595 : STD_LOGIC_VECTOR (51 downto 0);
    signal fourth_order_double_sin_cos_K2_V_load_reg_1600 : STD_LOGIC_VECTOR (43 downto 0);
    signal zext_ln818_fu_800_p1 : STD_LOGIC_VECTOR (97 downto 0);
    signal fourth_order_double_sin_cos_K0_V_load_reg_1647 : STD_LOGIC_VECTOR (58 downto 0);
    signal rhs_1_reg_1652 : STD_LOGIC_VECTOR (55 downto 0);
    signal rhs_2_reg_1657 : STD_LOGIC_VECTOR (47 downto 0);
    signal trunc_ln1_reg_1662 : STD_LOGIC_VECTOR (41 downto 0);
    signal fourth_order_double_sin_cos_K3_V_load_reg_1667 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln1270_1_reg_1672 : STD_LOGIC_VECTOR (34 downto 0);
    signal fourth_order_double_sin_cos_K4_V_load_reg_1677 : STD_LOGIC_VECTOR (24 downto 0);
    signal ret_V_7_fu_925_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_V_7_reg_1702 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_V_7_reg_1702_pp0_iter22_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal rhs_4_reg_1707 : STD_LOGIC_VECTOR (28 downto 0);
    signal trunc_ln2_reg_1712 : STD_LOGIC_VECTOR (36 downto 0);
    signal Mx_V_2_fu_951_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal Mx_V_2_reg_1717 : STD_LOGIC_VECTOR (62 downto 0);
    signal ret_V_fu_968_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_V_reg_1722 : STD_LOGIC_VECTOR (63 downto 0);
    signal result_V_reg_1737 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_s_43_reg_1743 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_31_1_reg_1748 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_31_1_reg_1748_pp0_iter29_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_31_2_reg_1753 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_31_2_reg_1753_pp0_iter29_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_reg_1758 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_5_reg_1758_pp0_iter29_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_5_reg_1758_pp0_iter30_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_7_fu_1053_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_reg_1763 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_reg_1763_pp0_iter30_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln1454_fu_1065_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal shl_ln1454_reg_1769 : STD_LOGIC_VECTOR (62 downto 0);
    signal shl_ln1454_reg_1769_pp0_iter30_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal shl_ln1454_reg_1769_pp0_iter31_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal icmp_ln1653_fu_1070_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1653_reg_1775 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1653_reg_1775_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_2_fu_1117_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_2_reg_1780 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln453_fu_1125_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln453_reg_1785 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln453_reg_1785_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln451_fu_1130_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln451_reg_1793 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln1454_1_fu_1140_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal shl_ln1454_1_reg_1798 : STD_LOGIC_VECTOR (62 downto 0);
    signal shl_ln1454_1_reg_1798_pp0_iter31_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal icmp_ln453_1_fu_1145_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln453_1_reg_1804 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln451_1_fu_1151_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln451_1_reg_1810 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln453_2_fu_1157_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln453_2_reg_1816 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_3_fu_1186_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_3_reg_1821 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln1454_2_fu_1201_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal shl_ln1454_2_reg_1826 : STD_LOGIC_VECTOR (62 downto 0);
    signal and_ln453_2_fu_1225_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln453_2_reg_1832 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln453_fu_1237_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln453_reg_1837 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln462_fu_1280_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln462_reg_1842 : STD_LOGIC_VECTOR (0 downto 0);
    signal results_exp_V_fu_1304_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal results_exp_V_reg_1847 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln668_fu_354_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal data_V_fu_294_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln214_fu_330_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal addr_fu_336_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_fu_344_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal din_sig_V_fu_316_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal zext_ln930_fu_369_p1 : STD_LOGIC_VECTOR (255 downto 0);
    signal r_V_15_fu_372_p2 : STD_LOGIC_VECTOR (255 downto 0);
    signal p_Result_13_fu_387_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal grp_fu_398_p1 : STD_LOGIC_VECTOR (52 downto 0);
    signal tmp_4_fu_423_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1027_fu_430_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_fu_435_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Mx_bits_V_1_fu_441_p2 : STD_LOGIC_VECTOR (123 downto 0);
    signal tmp_1_fu_453_p4 : STD_LOGIC_VECTOR (60 downto 0);
    signal p_Result_14_fu_463_p3 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_Result_2_fu_471_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_Result_15_fu_481_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal sext_ln1204_fu_489_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_493_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal Ex_V_fu_505_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1454_fu_526_p1 : STD_LOGIC_VECTOR (123 downto 0);
    signal r_fu_529_p2 : STD_LOGIC_VECTOR (123 downto 0);
    signal select_ln482_fu_510_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln841_fu_523_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal k_V_1_fu_517_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Result_17_fu_580_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_587_p18 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_625_p18 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_2_fu_681_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_fu_663_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln300_fu_692_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1535_fu_704_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1512_fu_707_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_fu_713_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1488_fu_720_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1488_fu_724_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal r_V_fu_728_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal r_V_2_fu_733_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal r_V_16_fu_738_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal grp_fu_772_p0 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_772_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal p_Result_16_fu_778_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_772_p2 : STD_LOGIC_VECTOR (97 downto 0);
    signal grp_fu_803_p0 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_803_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_808_p0 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_808_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_820_p0 : STD_LOGIC_VECTOR (55 downto 0);
    signal grp_fu_832_p0 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_820_p2 : STD_LOGIC_VECTOR (107 downto 0);
    signal grp_fu_832_p2 : STD_LOGIC_VECTOR (92 downto 0);
    signal grp_fu_803_p2 : STD_LOGIC_VECTOR (97 downto 0);
    signal grp_fu_808_p2 : STD_LOGIC_VECTOR (97 downto 0);
    signal grp_fu_891_p0 : STD_LOGIC_VECTOR (41 downto 0);
    signal grp_fu_891_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_903_p0 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_fu_903_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal t1_V_fu_878_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal sext_ln813_fu_909_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln813_1_fu_913_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_V_6_fu_916_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln1347_fu_922_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_903_p2 : STD_LOGIC_VECTOR (59 downto 0);
    signal grp_fu_891_p2 : STD_LOGIC_VECTOR (74 downto 0);
    signal zext_ln1347_fu_957_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_V_8_fu_960_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1347_1_fu_965_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_980_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal grp_fu_980_p2 : STD_LOGIC_VECTOR (125 downto 0);
    signal p_Result_9_fu_1036_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_1_fu_1043_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1488_1_fu_1061_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_9_1_fu_1075_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_34_1_fu_1089_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_9_2_fu_1082_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_34_2_fu_1107_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_1_fu_1099_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1488_2_fu_1136_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_6_fu_1169_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_34_3_fu_1176_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal Ex_V_4_fu_1163_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1488_3_fu_1198_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal xor_ln453_fu_1211_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln453_1_fu_1221_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln451_2_fu_1206_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln453_fu_1216_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln453_fu_1230_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln453_1_fu_1243_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln186_fu_1194_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln461_fu_1256_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln461_fu_1262_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln453_2_fu_1248_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newexp_fu_1266_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_1272_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_fu_1285_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln300_fu_1289_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln300_1_fu_1296_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1488_4_fu_1311_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal shl_ln1454_3_fu_1314_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_3_fu_1319_p4 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_6_fu_1329_p4 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_10_fu_1345_p4 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_11_fu_1354_p4 : STD_LOGIC_VECTOR (51 downto 0);
    signal select_ln453_3_fu_1338_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal select_ln453_4_fu_1363_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal and_ln300_2_fu_1377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln300_1_fu_1381_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln453_5_fu_1370_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal select_ln300_4_fu_1387_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal select_ln300_3_fu_1395_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal results_sig_V_fu_1402_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_18_fu_1409_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to31 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_398_p10 : STD_LOGIC_VECTOR (169 downto 0);
    signal grp_fu_820_p00 : STD_LOGIC_VECTOR (107 downto 0);
    signal grp_fu_832_p00 : STD_LOGIC_VECTOR (92 downto 0);
    signal grp_fu_891_p00 : STD_LOGIC_VECTOR (74 downto 0);
    signal grp_fu_891_p10 : STD_LOGIC_VECTOR (74 downto 0);
    signal grp_fu_903_p00 : STD_LOGIC_VECTOR (59 downto 0);
    signal grp_fu_903_p10 : STD_LOGIC_VECTOR (59 downto 0);
    signal grp_fu_980_p10 : STD_LOGIC_VECTOR (125 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component clusterOp_mul_170s_53ns_170_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (169 downto 0);
        din1 : IN STD_LOGIC_VECTOR (52 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (169 downto 0) );
    end component;


    component clusterOp_mux_83_1_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (0 downto 0);
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (0 downto 0);
        din5 : IN STD_LOGIC_VECTOR (0 downto 0);
        din6 : IN STD_LOGIC_VECTOR (0 downto 0);
        din7 : IN STD_LOGIC_VECTOR (0 downto 0);
        din8 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component clusterOp_mux_164_1_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (0 downto 0);
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (0 downto 0);
        din5 : IN STD_LOGIC_VECTOR (0 downto 0);
        din6 : IN STD_LOGIC_VECTOR (0 downto 0);
        din7 : IN STD_LOGIC_VECTOR (0 downto 0);
        din8 : IN STD_LOGIC_VECTOR (0 downto 0);
        din9 : IN STD_LOGIC_VECTOR (0 downto 0);
        din10 : IN STD_LOGIC_VECTOR (0 downto 0);
        din11 : IN STD_LOGIC_VECTOR (0 downto 0);
        din12 : IN STD_LOGIC_VECTOR (0 downto 0);
        din13 : IN STD_LOGIC_VECTOR (0 downto 0);
        din14 : IN STD_LOGIC_VECTOR (0 downto 0);
        din15 : IN STD_LOGIC_VECTOR (0 downto 0);
        din16 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component clusterOp_mul_49ns_49ns_98_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (48 downto 0);
        din1 : IN STD_LOGIC_VECTOR (48 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (97 downto 0) );
    end component;


    component clusterOp_mul_56ns_52s_108_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (55 downto 0);
        din1 : IN STD_LOGIC_VECTOR (51 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (107 downto 0) );
    end component;


    component clusterOp_mul_49ns_44s_93_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (48 downto 0);
        din1 : IN STD_LOGIC_VECTOR (43 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (92 downto 0) );
    end component;


    component clusterOp_mul_42ns_33ns_75_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (41 downto 0);
        din1 : IN STD_LOGIC_VECTOR (32 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (74 downto 0) );
    end component;


    component clusterOp_mul_35ns_25ns_60_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (34 downto 0);
        din1 : IN STD_LOGIC_VECTOR (24 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (59 downto 0) );
    end component;


    component clusterOp_mul_64s_63ns_126_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (62 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (125 downto 0) );
    end component;


    component clusterOp_sin_or_cos_double_s_ref_4oPi_table_256_V_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (255 downto 0) );
    end component;


    component clusterOp_sin_or_cos_double_s_fourth_order_double_sin_cos_K0_V_ROM_1P_LUTRAM_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (58 downto 0) );
    end component;


    component clusterOp_sin_or_cos_double_s_fourth_order_double_sin_cos_K1_V_ROM_1P_LUTRAM_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (51 downto 0) );
    end component;


    component clusterOp_sin_or_cos_double_s_fourth_order_double_sin_cos_K2_V_ROM_1P_LUTRAM_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (43 downto 0) );
    end component;


    component clusterOp_sin_or_cos_double_s_fourth_order_double_sin_cos_K3_V_ROM_1P_LUTRAM_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (32 downto 0) );
    end component;


    component clusterOp_sin_or_cos_double_s_fourth_order_double_sin_cos_K4_V_ROM_1P_LUTRAM_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;



begin
    ref_4oPi_table_256_V_U : component clusterOp_sin_or_cos_double_s_ref_4oPi_table_256_V_ROM_AUTO_1R
    generic map (
        DataWidth => 256,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ref_4oPi_table_256_V_address0,
        ce0 => ref_4oPi_table_256_V_ce0,
        q0 => ref_4oPi_table_256_V_q0);

    fourth_order_double_sin_cos_K0_V_U : component clusterOp_sin_or_cos_double_s_fourth_order_double_sin_cos_K0_V_ROM_1P_LUTRAM_1R
    generic map (
        DataWidth => 59,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fourth_order_double_sin_cos_K0_V_address0,
        ce0 => fourth_order_double_sin_cos_K0_V_ce0,
        q0 => fourth_order_double_sin_cos_K0_V_q0);

    fourth_order_double_sin_cos_K1_V_U : component clusterOp_sin_or_cos_double_s_fourth_order_double_sin_cos_K1_V_ROM_1P_LUTRAM_1R
    generic map (
        DataWidth => 52,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fourth_order_double_sin_cos_K1_V_address0,
        ce0 => fourth_order_double_sin_cos_K1_V_ce0,
        q0 => fourth_order_double_sin_cos_K1_V_q0);

    fourth_order_double_sin_cos_K2_V_U : component clusterOp_sin_or_cos_double_s_fourth_order_double_sin_cos_K2_V_ROM_1P_LUTRAM_1R
    generic map (
        DataWidth => 44,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fourth_order_double_sin_cos_K2_V_address0,
        ce0 => fourth_order_double_sin_cos_K2_V_ce0,
        q0 => fourth_order_double_sin_cos_K2_V_q0);

    fourth_order_double_sin_cos_K3_V_U : component clusterOp_sin_or_cos_double_s_fourth_order_double_sin_cos_K3_V_ROM_1P_LUTRAM_1R
    generic map (
        DataWidth => 33,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fourth_order_double_sin_cos_K3_V_address0,
        ce0 => fourth_order_double_sin_cos_K3_V_ce0,
        q0 => fourth_order_double_sin_cos_K3_V_q0);

    fourth_order_double_sin_cos_K4_V_U : component clusterOp_sin_or_cos_double_s_fourth_order_double_sin_cos_K4_V_ROM_1P_LUTRAM_1R
    generic map (
        DataWidth => 25,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fourth_order_double_sin_cos_K4_V_address0,
        ce0 => fourth_order_double_sin_cos_K4_V_ce0,
        q0 => fourth_order_double_sin_cos_K4_V_q0);

    mul_170s_53ns_170_5_1_U18 : component clusterOp_mul_170s_53ns_170_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 170,
        din1_WIDTH => 53,
        dout_WIDTH => 170)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => Med_V_reg_1466,
        din1 => grp_fu_398_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_398_p2);

    mux_83_1_1_1_U19 : component clusterOp_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_1,
        din2 => ap_const_lv1_1,
        din3 => ap_const_lv1_0,
        din4 => ap_const_lv1_0,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_1,
        din7 => ap_const_lv1_0,
        din8 => k_V_1_fu_517_p3,
        dout => sin_basis_fu_558_p10);

    mux_164_1_1_1_U20 : component clusterOp_mux_164_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 1,
        din9_WIDTH => 1,
        din10_WIDTH => 1,
        din11_WIDTH => 1,
        din12_WIDTH => 1,
        din13_WIDTH => 1,
        din14_WIDTH => 1,
        din15_WIDTH => 1,
        din16_WIDTH => 4,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_1,
        din3 => ap_const_lv1_0,
        din4 => ap_const_lv1_1,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_0,
        din7 => ap_const_lv1_1,
        din8 => ap_const_lv1_1,
        din9 => ap_const_lv1_0,
        din10 => ap_const_lv1_1,
        din11 => ap_const_lv1_1,
        din12 => ap_const_lv1_0,
        din13 => ap_const_lv1_1,
        din14 => ap_const_lv1_0,
        din15 => ap_const_lv1_0,
        din16 => p_Result_17_fu_580_p3,
        dout => tmp_8_fu_587_p18);

    mux_164_1_1_1_U21 : component clusterOp_mux_164_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 1,
        din9_WIDTH => 1,
        din10_WIDTH => 1,
        din11_WIDTH => 1,
        din12_WIDTH => 1,
        din13_WIDTH => 1,
        din14_WIDTH => 1,
        din15_WIDTH => 1,
        din16_WIDTH => 4,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_0,
        din3 => ap_const_lv1_1,
        din4 => ap_const_lv1_1,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_1,
        din7 => ap_const_lv1_0,
        din8 => ap_const_lv1_0,
        din9 => ap_const_lv1_1,
        din10 => ap_const_lv1_1,
        din11 => ap_const_lv1_1,
        din12 => ap_const_lv1_1,
        din13 => ap_const_lv1_0,
        din14 => ap_const_lv1_0,
        din15 => ap_const_lv1_0,
        din16 => p_Result_17_fu_580_p3,
        dout => tmp_9_fu_625_p18);

    mul_49ns_49ns_98_5_1_U22 : component clusterOp_mul_49ns_49ns_98_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 49,
        din1_WIDTH => 49,
        dout_WIDTH => 98)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_772_p0,
        din1 => grp_fu_772_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_772_p2);

    mul_49ns_49ns_98_5_1_U23 : component clusterOp_mul_49ns_49ns_98_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 49,
        din1_WIDTH => 49,
        dout_WIDTH => 98)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_803_p0,
        din1 => grp_fu_803_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_803_p2);

    mul_49ns_49ns_98_5_1_U24 : component clusterOp_mul_49ns_49ns_98_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 49,
        din1_WIDTH => 49,
        dout_WIDTH => 98)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_808_p0,
        din1 => grp_fu_808_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_808_p2);

    mul_56ns_52s_108_5_1_U25 : component clusterOp_mul_56ns_52s_108_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 56,
        din1_WIDTH => 52,
        dout_WIDTH => 108)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_820_p0,
        din1 => fourth_order_double_sin_cos_K1_V_load_reg_1595,
        ce => ap_const_logic_1,
        dout => grp_fu_820_p2);

    mul_49ns_44s_93_5_1_U26 : component clusterOp_mul_49ns_44s_93_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 49,
        din1_WIDTH => 44,
        dout_WIDTH => 93)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_832_p0,
        din1 => fourth_order_double_sin_cos_K2_V_load_reg_1600,
        ce => ap_const_logic_1,
        dout => grp_fu_832_p2);

    mul_42ns_33ns_75_2_1_U27 : component clusterOp_mul_42ns_33ns_75_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 42,
        din1_WIDTH => 33,
        dout_WIDTH => 75)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_891_p0,
        din1 => grp_fu_891_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_891_p2);

    mul_35ns_25ns_60_2_1_U28 : component clusterOp_mul_35ns_25ns_60_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 35,
        din1_WIDTH => 25,
        dout_WIDTH => 60)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_903_p0,
        din1 => grp_fu_903_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_903_p2);

    mul_64s_63ns_126_5_1_U29 : component clusterOp_mul_64s_63ns_126_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 63,
        dout_WIDTH => 126)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ret_V_reg_1722,
        din1 => grp_fu_980_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_980_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter31 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter32 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                B_V_reg_1555 <= B_V_fu_755_p1;
                B_V_reg_1555_pp0_iter11_reg <= B_V_reg_1555;
                B_V_reg_1555_pp0_iter12_reg <= B_V_reg_1555_pp0_iter11_reg;
                B_V_reg_1555_pp0_iter13_reg <= B_V_reg_1555_pp0_iter12_reg;
                B_V_reg_1555_pp0_iter14_reg <= B_V_reg_1555_pp0_iter13_reg;
                B_V_reg_1555_pp0_iter15_reg <= B_V_reg_1555_pp0_iter14_reg;
                B_squared_V_reg_1589 <= grp_fu_772_p2(97 downto 49);
                B_trunc_reg_1560 <= r_V_16_fu_738_p3(55 downto 7);
                Ex_V_3_reg_1510 <= Ex_V_3_fu_544_p2;
                Ex_V_3_reg_1510_pp0_iter10_reg <= Ex_V_3_reg_1510;
                Ex_V_3_reg_1510_pp0_iter11_reg <= Ex_V_3_reg_1510_pp0_iter10_reg;
                Ex_V_3_reg_1510_pp0_iter12_reg <= Ex_V_3_reg_1510_pp0_iter11_reg;
                Ex_V_3_reg_1510_pp0_iter13_reg <= Ex_V_3_reg_1510_pp0_iter12_reg;
                Ex_V_3_reg_1510_pp0_iter14_reg <= Ex_V_3_reg_1510_pp0_iter13_reg;
                Ex_V_3_reg_1510_pp0_iter15_reg <= Ex_V_3_reg_1510_pp0_iter14_reg;
                Ex_V_3_reg_1510_pp0_iter16_reg <= Ex_V_3_reg_1510_pp0_iter15_reg;
                Ex_V_3_reg_1510_pp0_iter17_reg <= Ex_V_3_reg_1510_pp0_iter16_reg;
                Ex_V_3_reg_1510_pp0_iter18_reg <= Ex_V_3_reg_1510_pp0_iter17_reg;
                Ex_V_3_reg_1510_pp0_iter19_reg <= Ex_V_3_reg_1510_pp0_iter18_reg;
                Ex_V_3_reg_1510_pp0_iter20_reg <= Ex_V_3_reg_1510_pp0_iter19_reg;
                Ex_V_3_reg_1510_pp0_iter21_reg <= Ex_V_3_reg_1510_pp0_iter20_reg;
                Ex_V_3_reg_1510_pp0_iter22_reg <= Ex_V_3_reg_1510_pp0_iter21_reg;
                Ex_V_3_reg_1510_pp0_iter23_reg <= Ex_V_3_reg_1510_pp0_iter22_reg;
                Ex_V_3_reg_1510_pp0_iter24_reg <= Ex_V_3_reg_1510_pp0_iter23_reg;
                Ex_V_3_reg_1510_pp0_iter25_reg <= Ex_V_3_reg_1510_pp0_iter24_reg;
                Ex_V_3_reg_1510_pp0_iter26_reg <= Ex_V_3_reg_1510_pp0_iter25_reg;
                Ex_V_3_reg_1510_pp0_iter27_reg <= Ex_V_3_reg_1510_pp0_iter26_reg;
                Ex_V_3_reg_1510_pp0_iter28_reg <= Ex_V_3_reg_1510_pp0_iter27_reg;
                Ex_V_3_reg_1510_pp0_iter29_reg <= Ex_V_3_reg_1510_pp0_iter28_reg;
                Ex_V_3_reg_1510_pp0_iter30_reg <= Ex_V_3_reg_1510_pp0_iter29_reg;
                Med_V_reg_1466 <= r_V_15_fu_372_p2(255 downto 86);
                Mx_V_2_reg_1717 <= Mx_V_2_fu_951_p3;
                Mx_V_reg_1503 <= r_fu_529_p2(123 downto 61);
                Mx_V_reg_1503_pp0_iter10_reg <= Mx_V_reg_1503;
                Mx_V_reg_1503_pp0_iter11_reg <= Mx_V_reg_1503_pp0_iter10_reg;
                Mx_V_reg_1503_pp0_iter12_reg <= Mx_V_reg_1503_pp0_iter11_reg;
                Mx_V_reg_1503_pp0_iter13_reg <= Mx_V_reg_1503_pp0_iter12_reg;
                Mx_V_reg_1503_pp0_iter14_reg <= Mx_V_reg_1503_pp0_iter13_reg;
                Mx_V_reg_1503_pp0_iter15_reg <= Mx_V_reg_1503_pp0_iter14_reg;
                Mx_V_reg_1503_pp0_iter16_reg <= Mx_V_reg_1503_pp0_iter15_reg;
                Mx_V_reg_1503_pp0_iter17_reg <= Mx_V_reg_1503_pp0_iter16_reg;
                Mx_V_reg_1503_pp0_iter18_reg <= Mx_V_reg_1503_pp0_iter17_reg;
                Mx_V_reg_1503_pp0_iter19_reg <= Mx_V_reg_1503_pp0_iter18_reg;
                Mx_V_reg_1503_pp0_iter20_reg <= Mx_V_reg_1503_pp0_iter19_reg;
                Mx_V_reg_1503_pp0_iter21_reg <= Mx_V_reg_1503_pp0_iter20_reg;
                Mx_V_reg_1503_pp0_iter22_reg <= Mx_V_reg_1503_pp0_iter21_reg;
                Mx_bits_V_3_reg_1492 <= Mx_bits_V_3_fu_446_p3;
                Mx_bits_V_reg_1481 <= grp_fu_398_p2(166 downto 43);
                Mx_zeros_reg_1497 <= Mx_zeros_fu_501_p1;
                add_ln451_1_reg_1810 <= add_ln451_1_fu_1151_p2;
                add_ln451_reg_1793 <= add_ln451_fu_1130_p2;
                and_ln300_reg_1534 <= and_ln300_fu_676_p2;
                and_ln300_reg_1534_pp0_iter10_reg <= and_ln300_reg_1534;
                and_ln300_reg_1534_pp0_iter11_reg <= and_ln300_reg_1534_pp0_iter10_reg;
                and_ln300_reg_1534_pp0_iter12_reg <= and_ln300_reg_1534_pp0_iter11_reg;
                and_ln300_reg_1534_pp0_iter13_reg <= and_ln300_reg_1534_pp0_iter12_reg;
                and_ln300_reg_1534_pp0_iter14_reg <= and_ln300_reg_1534_pp0_iter13_reg;
                and_ln300_reg_1534_pp0_iter15_reg <= and_ln300_reg_1534_pp0_iter14_reg;
                and_ln300_reg_1534_pp0_iter16_reg <= and_ln300_reg_1534_pp0_iter15_reg;
                and_ln300_reg_1534_pp0_iter17_reg <= and_ln300_reg_1534_pp0_iter16_reg;
                and_ln300_reg_1534_pp0_iter18_reg <= and_ln300_reg_1534_pp0_iter17_reg;
                and_ln300_reg_1534_pp0_iter19_reg <= and_ln300_reg_1534_pp0_iter18_reg;
                and_ln300_reg_1534_pp0_iter20_reg <= and_ln300_reg_1534_pp0_iter19_reg;
                and_ln300_reg_1534_pp0_iter21_reg <= and_ln300_reg_1534_pp0_iter20_reg;
                and_ln300_reg_1534_pp0_iter22_reg <= and_ln300_reg_1534_pp0_iter21_reg;
                and_ln300_reg_1534_pp0_iter23_reg <= and_ln300_reg_1534_pp0_iter22_reg;
                and_ln300_reg_1534_pp0_iter24_reg <= and_ln300_reg_1534_pp0_iter23_reg;
                and_ln300_reg_1534_pp0_iter25_reg <= and_ln300_reg_1534_pp0_iter24_reg;
                and_ln300_reg_1534_pp0_iter26_reg <= and_ln300_reg_1534_pp0_iter25_reg;
                and_ln300_reg_1534_pp0_iter27_reg <= and_ln300_reg_1534_pp0_iter26_reg;
                and_ln300_reg_1534_pp0_iter28_reg <= and_ln300_reg_1534_pp0_iter27_reg;
                and_ln300_reg_1534_pp0_iter29_reg <= and_ln300_reg_1534_pp0_iter28_reg;
                and_ln300_reg_1534_pp0_iter30_reg <= and_ln300_reg_1534_pp0_iter29_reg;
                and_ln453_2_reg_1832 <= and_ln453_2_fu_1225_p2;
                closepath_reg_1433_pp0_iter2_reg <= closepath_reg_1433_pp0_iter1_reg;
                closepath_reg_1433_pp0_iter3_reg <= closepath_reg_1433_pp0_iter2_reg;
                closepath_reg_1433_pp0_iter4_reg <= closepath_reg_1433_pp0_iter3_reg;
                closepath_reg_1433_pp0_iter5_reg <= closepath_reg_1433_pp0_iter4_reg;
                closepath_reg_1433_pp0_iter6_reg <= closepath_reg_1433_pp0_iter5_reg;
                closepath_reg_1433_pp0_iter7_reg <= closepath_reg_1433_pp0_iter6_reg;
                closepath_reg_1433_pp0_iter8_reg <= closepath_reg_1433_pp0_iter7_reg;
                din_exp_V_reg_1426_pp0_iter2_reg <= din_exp_V_reg_1426_pp0_iter1_reg;
                din_exp_V_reg_1426_pp0_iter3_reg <= din_exp_V_reg_1426_pp0_iter2_reg;
                din_exp_V_reg_1426_pp0_iter4_reg <= din_exp_V_reg_1426_pp0_iter3_reg;
                din_exp_V_reg_1426_pp0_iter5_reg <= din_exp_V_reg_1426_pp0_iter4_reg;
                din_exp_V_reg_1426_pp0_iter6_reg <= din_exp_V_reg_1426_pp0_iter5_reg;
                din_exp_V_reg_1426_pp0_iter7_reg <= din_exp_V_reg_1426_pp0_iter6_reg;
                din_exp_V_reg_1426_pp0_iter8_reg <= din_exp_V_reg_1426_pp0_iter7_reg;
                fourth_order_double_sin_cos_K0_V_load_reg_1647 <= fourth_order_double_sin_cos_K0_V_q0;
                fourth_order_double_sin_cos_K1_V_load_reg_1595 <= fourth_order_double_sin_cos_K1_V_q0;
                fourth_order_double_sin_cos_K2_V_load_reg_1600 <= fourth_order_double_sin_cos_K2_V_q0;
                fourth_order_double_sin_cos_K3_V_load_reg_1667 <= fourth_order_double_sin_cos_K3_V_q0;
                fourth_order_double_sin_cos_K4_V_load_reg_1677 <= fourth_order_double_sin_cos_K4_V_q0;
                icmp_ln1019_1_reg_1455_pp0_iter10_reg <= icmp_ln1019_1_reg_1455_pp0_iter9_reg;
                icmp_ln1019_1_reg_1455_pp0_iter11_reg <= icmp_ln1019_1_reg_1455_pp0_iter10_reg;
                icmp_ln1019_1_reg_1455_pp0_iter12_reg <= icmp_ln1019_1_reg_1455_pp0_iter11_reg;
                icmp_ln1019_1_reg_1455_pp0_iter13_reg <= icmp_ln1019_1_reg_1455_pp0_iter12_reg;
                icmp_ln1019_1_reg_1455_pp0_iter14_reg <= icmp_ln1019_1_reg_1455_pp0_iter13_reg;
                icmp_ln1019_1_reg_1455_pp0_iter15_reg <= icmp_ln1019_1_reg_1455_pp0_iter14_reg;
                icmp_ln1019_1_reg_1455_pp0_iter16_reg <= icmp_ln1019_1_reg_1455_pp0_iter15_reg;
                icmp_ln1019_1_reg_1455_pp0_iter17_reg <= icmp_ln1019_1_reg_1455_pp0_iter16_reg;
                icmp_ln1019_1_reg_1455_pp0_iter18_reg <= icmp_ln1019_1_reg_1455_pp0_iter17_reg;
                icmp_ln1019_1_reg_1455_pp0_iter19_reg <= icmp_ln1019_1_reg_1455_pp0_iter18_reg;
                icmp_ln1019_1_reg_1455_pp0_iter20_reg <= icmp_ln1019_1_reg_1455_pp0_iter19_reg;
                icmp_ln1019_1_reg_1455_pp0_iter21_reg <= icmp_ln1019_1_reg_1455_pp0_iter20_reg;
                icmp_ln1019_1_reg_1455_pp0_iter22_reg <= icmp_ln1019_1_reg_1455_pp0_iter21_reg;
                icmp_ln1019_1_reg_1455_pp0_iter23_reg <= icmp_ln1019_1_reg_1455_pp0_iter22_reg;
                icmp_ln1019_1_reg_1455_pp0_iter24_reg <= icmp_ln1019_1_reg_1455_pp0_iter23_reg;
                icmp_ln1019_1_reg_1455_pp0_iter25_reg <= icmp_ln1019_1_reg_1455_pp0_iter24_reg;
                icmp_ln1019_1_reg_1455_pp0_iter26_reg <= icmp_ln1019_1_reg_1455_pp0_iter25_reg;
                icmp_ln1019_1_reg_1455_pp0_iter27_reg <= icmp_ln1019_1_reg_1455_pp0_iter26_reg;
                icmp_ln1019_1_reg_1455_pp0_iter28_reg <= icmp_ln1019_1_reg_1455_pp0_iter27_reg;
                icmp_ln1019_1_reg_1455_pp0_iter29_reg <= icmp_ln1019_1_reg_1455_pp0_iter28_reg;
                icmp_ln1019_1_reg_1455_pp0_iter2_reg <= icmp_ln1019_1_reg_1455_pp0_iter1_reg;
                icmp_ln1019_1_reg_1455_pp0_iter30_reg <= icmp_ln1019_1_reg_1455_pp0_iter29_reg;
                icmp_ln1019_1_reg_1455_pp0_iter31_reg <= icmp_ln1019_1_reg_1455_pp0_iter30_reg;
                icmp_ln1019_1_reg_1455_pp0_iter3_reg <= icmp_ln1019_1_reg_1455_pp0_iter2_reg;
                icmp_ln1019_1_reg_1455_pp0_iter4_reg <= icmp_ln1019_1_reg_1455_pp0_iter3_reg;
                icmp_ln1019_1_reg_1455_pp0_iter5_reg <= icmp_ln1019_1_reg_1455_pp0_iter4_reg;
                icmp_ln1019_1_reg_1455_pp0_iter6_reg <= icmp_ln1019_1_reg_1455_pp0_iter5_reg;
                icmp_ln1019_1_reg_1455_pp0_iter7_reg <= icmp_ln1019_1_reg_1455_pp0_iter6_reg;
                icmp_ln1019_1_reg_1455_pp0_iter8_reg <= icmp_ln1019_1_reg_1455_pp0_iter7_reg;
                icmp_ln1019_1_reg_1455_pp0_iter9_reg <= icmp_ln1019_1_reg_1455_pp0_iter8_reg;
                icmp_ln1019_reg_1529 <= icmp_ln1019_fu_671_p2;
                icmp_ln1019_reg_1529_pp0_iter10_reg <= icmp_ln1019_reg_1529;
                icmp_ln1019_reg_1529_pp0_iter11_reg <= icmp_ln1019_reg_1529_pp0_iter10_reg;
                icmp_ln1019_reg_1529_pp0_iter12_reg <= icmp_ln1019_reg_1529_pp0_iter11_reg;
                icmp_ln1019_reg_1529_pp0_iter13_reg <= icmp_ln1019_reg_1529_pp0_iter12_reg;
                icmp_ln1019_reg_1529_pp0_iter14_reg <= icmp_ln1019_reg_1529_pp0_iter13_reg;
                icmp_ln1019_reg_1529_pp0_iter15_reg <= icmp_ln1019_reg_1529_pp0_iter14_reg;
                icmp_ln1019_reg_1529_pp0_iter16_reg <= icmp_ln1019_reg_1529_pp0_iter15_reg;
                icmp_ln1019_reg_1529_pp0_iter17_reg <= icmp_ln1019_reg_1529_pp0_iter16_reg;
                icmp_ln1019_reg_1529_pp0_iter18_reg <= icmp_ln1019_reg_1529_pp0_iter17_reg;
                icmp_ln1019_reg_1529_pp0_iter19_reg <= icmp_ln1019_reg_1529_pp0_iter18_reg;
                icmp_ln1019_reg_1529_pp0_iter20_reg <= icmp_ln1019_reg_1529_pp0_iter19_reg;
                icmp_ln1019_reg_1529_pp0_iter21_reg <= icmp_ln1019_reg_1529_pp0_iter20_reg;
                icmp_ln1019_reg_1529_pp0_iter22_reg <= icmp_ln1019_reg_1529_pp0_iter21_reg;
                icmp_ln1019_reg_1529_pp0_iter23_reg <= icmp_ln1019_reg_1529_pp0_iter22_reg;
                icmp_ln1019_reg_1529_pp0_iter24_reg <= icmp_ln1019_reg_1529_pp0_iter23_reg;
                icmp_ln1019_reg_1529_pp0_iter25_reg <= icmp_ln1019_reg_1529_pp0_iter24_reg;
                icmp_ln1019_reg_1529_pp0_iter26_reg <= icmp_ln1019_reg_1529_pp0_iter25_reg;
                icmp_ln1019_reg_1529_pp0_iter27_reg <= icmp_ln1019_reg_1529_pp0_iter26_reg;
                icmp_ln1019_reg_1529_pp0_iter28_reg <= icmp_ln1019_reg_1529_pp0_iter27_reg;
                icmp_ln1019_reg_1529_pp0_iter29_reg <= icmp_ln1019_reg_1529_pp0_iter28_reg;
                icmp_ln1019_reg_1529_pp0_iter30_reg <= icmp_ln1019_reg_1529_pp0_iter29_reg;
                icmp_ln1019_reg_1529_pp0_iter31_reg <= icmp_ln1019_reg_1529_pp0_iter30_reg;
                icmp_ln1653_reg_1775 <= icmp_ln1653_fu_1070_p2;
                icmp_ln1653_reg_1775_pp0_iter30_reg <= icmp_ln1653_reg_1775;
                icmp_ln453_1_reg_1804 <= icmp_ln453_1_fu_1145_p2;
                icmp_ln453_2_reg_1816 <= icmp_ln453_2_fu_1157_p2;
                icmp_ln453_reg_1785 <= icmp_ln453_fu_1125_p2;
                icmp_ln453_reg_1785_pp0_iter31_reg <= icmp_ln453_reg_1785;
                isNeg_reg_1516 <= Ex_V_3_fu_544_p2(10 downto 10);
                k_V_reg_1487_pp0_iter8_reg <= k_V_reg_1487;
                or_ln300_reg_1539 <= or_ln300_fu_686_p2;
                or_ln300_reg_1539_pp0_iter10_reg <= or_ln300_reg_1539;
                or_ln300_reg_1539_pp0_iter11_reg <= or_ln300_reg_1539_pp0_iter10_reg;
                or_ln300_reg_1539_pp0_iter12_reg <= or_ln300_reg_1539_pp0_iter11_reg;
                or_ln300_reg_1539_pp0_iter13_reg <= or_ln300_reg_1539_pp0_iter12_reg;
                or_ln300_reg_1539_pp0_iter14_reg <= or_ln300_reg_1539_pp0_iter13_reg;
                or_ln300_reg_1539_pp0_iter15_reg <= or_ln300_reg_1539_pp0_iter14_reg;
                or_ln300_reg_1539_pp0_iter16_reg <= or_ln300_reg_1539_pp0_iter15_reg;
                or_ln300_reg_1539_pp0_iter17_reg <= or_ln300_reg_1539_pp0_iter16_reg;
                or_ln300_reg_1539_pp0_iter18_reg <= or_ln300_reg_1539_pp0_iter17_reg;
                or_ln300_reg_1539_pp0_iter19_reg <= or_ln300_reg_1539_pp0_iter18_reg;
                or_ln300_reg_1539_pp0_iter20_reg <= or_ln300_reg_1539_pp0_iter19_reg;
                or_ln300_reg_1539_pp0_iter21_reg <= or_ln300_reg_1539_pp0_iter20_reg;
                or_ln300_reg_1539_pp0_iter22_reg <= or_ln300_reg_1539_pp0_iter21_reg;
                or_ln300_reg_1539_pp0_iter23_reg <= or_ln300_reg_1539_pp0_iter22_reg;
                or_ln300_reg_1539_pp0_iter24_reg <= or_ln300_reg_1539_pp0_iter23_reg;
                or_ln300_reg_1539_pp0_iter25_reg <= or_ln300_reg_1539_pp0_iter24_reg;
                or_ln300_reg_1539_pp0_iter26_reg <= or_ln300_reg_1539_pp0_iter25_reg;
                or_ln300_reg_1539_pp0_iter27_reg <= or_ln300_reg_1539_pp0_iter26_reg;
                or_ln300_reg_1539_pp0_iter28_reg <= or_ln300_reg_1539_pp0_iter27_reg;
                or_ln300_reg_1539_pp0_iter29_reg <= or_ln300_reg_1539_pp0_iter28_reg;
                or_ln300_reg_1539_pp0_iter30_reg <= or_ln300_reg_1539_pp0_iter29_reg;
                or_ln300_reg_1539_pp0_iter31_reg <= or_ln300_reg_1539_pp0_iter30_reg;
                or_ln453_reg_1837 <= or_ln453_fu_1237_p2;
                or_ln462_reg_1842 <= or_ln462_fu_1280_p2;
                p_Result_11_reg_1421_pp0_iter2_reg <= p_Result_11_reg_1421_pp0_iter1_reg;
                p_Result_11_reg_1421_pp0_iter3_reg <= p_Result_11_reg_1421_pp0_iter2_reg;
                p_Result_11_reg_1421_pp0_iter4_reg <= p_Result_11_reg_1421_pp0_iter3_reg;
                p_Result_11_reg_1421_pp0_iter5_reg <= p_Result_11_reg_1421_pp0_iter4_reg;
                p_Result_11_reg_1421_pp0_iter6_reg <= p_Result_11_reg_1421_pp0_iter5_reg;
                p_Result_11_reg_1421_pp0_iter7_reg <= p_Result_11_reg_1421_pp0_iter6_reg;
                p_Result_11_reg_1421_pp0_iter8_reg <= p_Result_11_reg_1421_pp0_iter7_reg;
                p_Result_12_reg_1440_pp0_iter2_reg <= p_Result_12_reg_1440_pp0_iter1_reg;
                p_Result_31_1_reg_1748 <= grp_fu_980_p2(109 downto 94);
                p_Result_31_1_reg_1748_pp0_iter29_reg <= p_Result_31_1_reg_1748;
                p_Result_31_2_reg_1753 <= grp_fu_980_p2(93 downto 78);
                p_Result_31_2_reg_1753_pp0_iter29_reg <= p_Result_31_2_reg_1753;
                p_Result_s_43_reg_1743 <= grp_fu_980_p2(125 downto 110);
                result_V_reg_1737 <= grp_fu_980_p2(125 downto 63);
                results_exp_V_reg_1847 <= results_exp_V_fu_1304_p3;
                results_sign_V_1_reg_1545 <= results_sign_V_1_fu_698_p2;
                results_sign_V_1_reg_1545_pp0_iter10_reg <= results_sign_V_1_reg_1545;
                results_sign_V_1_reg_1545_pp0_iter11_reg <= results_sign_V_1_reg_1545_pp0_iter10_reg;
                results_sign_V_1_reg_1545_pp0_iter12_reg <= results_sign_V_1_reg_1545_pp0_iter11_reg;
                results_sign_V_1_reg_1545_pp0_iter13_reg <= results_sign_V_1_reg_1545_pp0_iter12_reg;
                results_sign_V_1_reg_1545_pp0_iter14_reg <= results_sign_V_1_reg_1545_pp0_iter13_reg;
                results_sign_V_1_reg_1545_pp0_iter15_reg <= results_sign_V_1_reg_1545_pp0_iter14_reg;
                results_sign_V_1_reg_1545_pp0_iter16_reg <= results_sign_V_1_reg_1545_pp0_iter15_reg;
                results_sign_V_1_reg_1545_pp0_iter17_reg <= results_sign_V_1_reg_1545_pp0_iter16_reg;
                results_sign_V_1_reg_1545_pp0_iter18_reg <= results_sign_V_1_reg_1545_pp0_iter17_reg;
                results_sign_V_1_reg_1545_pp0_iter19_reg <= results_sign_V_1_reg_1545_pp0_iter18_reg;
                results_sign_V_1_reg_1545_pp0_iter20_reg <= results_sign_V_1_reg_1545_pp0_iter19_reg;
                results_sign_V_1_reg_1545_pp0_iter21_reg <= results_sign_V_1_reg_1545_pp0_iter20_reg;
                results_sign_V_1_reg_1545_pp0_iter22_reg <= results_sign_V_1_reg_1545_pp0_iter21_reg;
                results_sign_V_1_reg_1545_pp0_iter23_reg <= results_sign_V_1_reg_1545_pp0_iter22_reg;
                results_sign_V_1_reg_1545_pp0_iter24_reg <= results_sign_V_1_reg_1545_pp0_iter23_reg;
                results_sign_V_1_reg_1545_pp0_iter25_reg <= results_sign_V_1_reg_1545_pp0_iter24_reg;
                results_sign_V_1_reg_1545_pp0_iter26_reg <= results_sign_V_1_reg_1545_pp0_iter25_reg;
                results_sign_V_1_reg_1545_pp0_iter27_reg <= results_sign_V_1_reg_1545_pp0_iter26_reg;
                results_sign_V_1_reg_1545_pp0_iter28_reg <= results_sign_V_1_reg_1545_pp0_iter27_reg;
                results_sign_V_1_reg_1545_pp0_iter29_reg <= results_sign_V_1_reg_1545_pp0_iter28_reg;
                results_sign_V_1_reg_1545_pp0_iter30_reg <= results_sign_V_1_reg_1545_pp0_iter29_reg;
                results_sign_V_1_reg_1545_pp0_iter31_reg <= results_sign_V_1_reg_1545_pp0_iter30_reg;
                ret_V_5_reg_1476 <= grp_fu_398_p2;
                ret_V_7_reg_1702 <= ret_V_7_fu_925_p2;
                ret_V_7_reg_1702_pp0_iter22_reg <= ret_V_7_reg_1702;
                ret_V_reg_1722 <= ret_V_fu_968_p2;
                rhs_1_reg_1652 <= grp_fu_820_p2(107 downto 52);
                rhs_2_reg_1657 <= grp_fu_832_p2(92 downto 45);
                rhs_4_reg_1707 <= grp_fu_903_p2(59 downto 31);
                shl_ln1454_1_reg_1798_pp0_iter31_reg <= shl_ln1454_1_reg_1798;
                shl_ln1454_reg_1769_pp0_iter30_reg <= shl_ln1454_reg_1769;
                shl_ln1454_reg_1769_pp0_iter31_reg <= shl_ln1454_reg_1769_pp0_iter30_reg;
                sin_basis_reg_1522 <= sin_basis_fu_558_p10;
                sin_basis_reg_1522_pp0_iter10_reg <= sin_basis_reg_1522;
                sin_basis_reg_1522_pp0_iter11_reg <= sin_basis_reg_1522_pp0_iter10_reg;
                sin_basis_reg_1522_pp0_iter12_reg <= sin_basis_reg_1522_pp0_iter11_reg;
                sin_basis_reg_1522_pp0_iter13_reg <= sin_basis_reg_1522_pp0_iter12_reg;
                sin_basis_reg_1522_pp0_iter14_reg <= sin_basis_reg_1522_pp0_iter13_reg;
                sin_basis_reg_1522_pp0_iter15_reg <= sin_basis_reg_1522_pp0_iter14_reg;
                sin_basis_reg_1522_pp0_iter16_reg <= sin_basis_reg_1522_pp0_iter15_reg;
                sin_basis_reg_1522_pp0_iter17_reg <= sin_basis_reg_1522_pp0_iter16_reg;
                sin_basis_reg_1522_pp0_iter18_reg <= sin_basis_reg_1522_pp0_iter17_reg;
                sin_basis_reg_1522_pp0_iter19_reg <= sin_basis_reg_1522_pp0_iter18_reg;
                sin_basis_reg_1522_pp0_iter20_reg <= sin_basis_reg_1522_pp0_iter19_reg;
                sin_basis_reg_1522_pp0_iter21_reg <= sin_basis_reg_1522_pp0_iter20_reg;
                sin_basis_reg_1522_pp0_iter22_reg <= sin_basis_reg_1522_pp0_iter21_reg;
                sin_basis_reg_1522_pp0_iter23_reg <= sin_basis_reg_1522_pp0_iter22_reg;
                sin_basis_reg_1522_pp0_iter24_reg <= sin_basis_reg_1522_pp0_iter23_reg;
                sin_basis_reg_1522_pp0_iter25_reg <= sin_basis_reg_1522_pp0_iter24_reg;
                sin_basis_reg_1522_pp0_iter26_reg <= sin_basis_reg_1522_pp0_iter25_reg;
                sin_basis_reg_1522_pp0_iter27_reg <= sin_basis_reg_1522_pp0_iter26_reg;
                sin_basis_reg_1522_pp0_iter28_reg <= sin_basis_reg_1522_pp0_iter27_reg;
                sin_basis_reg_1522_pp0_iter29_reg <= sin_basis_reg_1522_pp0_iter28_reg;
                sin_basis_reg_1522_pp0_iter30_reg <= sin_basis_reg_1522_pp0_iter29_reg;
                tmp_2_reg_1550 <= r_V_16_fu_738_p3(62 downto 56);
                tmp_2_reg_1550_pp0_iter11_reg <= tmp_2_reg_1550;
                tmp_2_reg_1550_pp0_iter12_reg <= tmp_2_reg_1550_pp0_iter11_reg;
                tmp_2_reg_1550_pp0_iter13_reg <= tmp_2_reg_1550_pp0_iter12_reg;
                tmp_5_reg_1758 <= grp_fu_980_p2(77 downto 63);
                tmp_5_reg_1758_pp0_iter29_reg <= tmp_5_reg_1758;
                tmp_5_reg_1758_pp0_iter30_reg <= tmp_5_reg_1758_pp0_iter29_reg;
                tmp_7_2_reg_1780 <= tmp_7_2_fu_1117_p3;
                tmp_7_3_reg_1821 <= tmp_7_3_fu_1186_p3;
                tmp_7_reg_1763 <= tmp_7_fu_1053_p3;
                tmp_7_reg_1763_pp0_iter30_reg <= tmp_7_reg_1763;
                trunc_ln1270_1_reg_1672 <= grp_fu_808_p2(97 downto 63);
                trunc_ln1_reg_1662 <= grp_fu_803_p2(97 downto 56);
                trunc_ln2_reg_1712 <= grp_fu_891_p2(74 downto 38);
                    zext_ln1271_reg_1565(48 downto 0) <= zext_ln1271_fu_769_p1(48 downto 0);
                    zext_ln1271_reg_1565_pp0_iter12_reg(48 downto 0) <= zext_ln1271_reg_1565(48 downto 0);
                    zext_ln1271_reg_1565_pp0_iter13_reg(48 downto 0) <= zext_ln1271_reg_1565_pp0_iter12_reg(48 downto 0);
                    zext_ln1271_reg_1565_pp0_iter14_reg(48 downto 0) <= zext_ln1271_reg_1565_pp0_iter13_reg(48 downto 0);
                    zext_ln1271_reg_1565_pp0_iter15_reg(48 downto 0) <= zext_ln1271_reg_1565_pp0_iter14_reg(48 downto 0);
                    zext_ln541_reg_1572(7 downto 0) <= zext_ln541_fu_784_p1(7 downto 0);
                    zext_ln541_reg_1572_pp0_iter15_reg(7 downto 0) <= zext_ln541_reg_1572(7 downto 0);
                    zext_ln541_reg_1572_pp0_iter16_reg(7 downto 0) <= zext_ln541_reg_1572_pp0_iter15_reg(7 downto 0);
                    zext_ln541_reg_1572_pp0_iter17_reg(7 downto 0) <= zext_ln541_reg_1572_pp0_iter16_reg(7 downto 0);
                    zext_ln541_reg_1572_pp0_iter18_reg(7 downto 0) <= zext_ln541_reg_1572_pp0_iter17_reg(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                closepath_reg_1433 <= closepath_fu_320_p2;
                closepath_reg_1433_pp0_iter1_reg <= closepath_reg_1433;
                din_exp_V_reg_1426 <= data_V_fu_294_p1(62 downto 52);
                din_exp_V_reg_1426_pp0_iter1_reg <= din_exp_V_reg_1426;
                icmp_ln1019_1_reg_1455 <= icmp_ln1019_1_fu_363_p2;
                icmp_ln1019_1_reg_1455_pp0_iter1_reg <= icmp_ln1019_1_reg_1455;
                p_Result_11_reg_1421 <= data_V_fu_294_p1(63 downto 63);
                p_Result_11_reg_1421_pp0_iter1_reg <= p_Result_11_reg_1421;
                p_Result_12_reg_1440 <= p_Result_12_fu_326_p1;
                p_Result_12_reg_1440_pp0_iter1_reg <= p_Result_12_reg_1440;
                table_256_V_reg_1461 <= ref_4oPi_table_256_V_q0;
                trunc_ln628_reg_1450 <= trunc_ln628_fu_359_p1;
                trunc_ln628_reg_1450_pp0_iter1_reg <= trunc_ln628_reg_1450;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((closepath_reg_1433_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                k_V_reg_1487 <= grp_fu_398_p2(169 downto 167);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_ln300_reg_1539_pp0_iter29_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                shl_ln1454_1_reg_1798 <= shl_ln1454_1_fu_1140_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_ln300_reg_1539_pp0_iter30_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                shl_ln1454_2_reg_1826 <= shl_ln1454_2_fu_1201_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_ln300_reg_1539_pp0_iter28_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                shl_ln1454_reg_1769 <= shl_ln1454_fu_1065_p2;
            end if;
        end if;
    end process;
    zext_ln1271_reg_1565(97 downto 49) <= "0000000000000000000000000000000000000000000000000";
    zext_ln1271_reg_1565_pp0_iter12_reg(97 downto 49) <= "0000000000000000000000000000000000000000000000000";
    zext_ln1271_reg_1565_pp0_iter13_reg(97 downto 49) <= "0000000000000000000000000000000000000000000000000";
    zext_ln1271_reg_1565_pp0_iter14_reg(97 downto 49) <= "0000000000000000000000000000000000000000000000000";
    zext_ln1271_reg_1565_pp0_iter15_reg(97 downto 49) <= "0000000000000000000000000000000000000000000000000";
    zext_ln541_reg_1572(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln541_reg_1572_pp0_iter15_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln541_reg_1572_pp0_iter16_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln541_reg_1572_pp0_iter17_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln541_reg_1572_pp0_iter18_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    B_V_fu_755_p1 <= r_V_16_fu_738_p3(56 - 1 downto 0);
    Ex_V_3_fu_544_p2 <= std_logic_vector(unsigned(select_ln482_fu_510_p3) - unsigned(zext_ln841_fu_523_p1));
    Ex_V_4_fu_1163_p3 <= 
        Ex_V_3_reg_1510_pp0_iter30_reg when (sin_basis_reg_1522_pp0_iter30_reg(0) = '1') else 
        ap_const_lv11_0;
    Ex_V_fu_505_p2 <= std_logic_vector(unsigned(din_exp_V_reg_1426_pp0_iter8_reg) + unsigned(ap_const_lv11_403));
    Mx_V_2_fu_951_p3 <= 
        Mx_V_reg_1503_pp0_iter22_reg when (sin_basis_reg_1522_pp0_iter22_reg(0) = '1') else 
        ap_const_lv63_7FFFFFFFFFFFFFFF;
    Mx_bits_V_1_fu_441_p2 <= std_logic_vector(unsigned(ap_const_lv124_0) - unsigned(Mx_bits_V_reg_1481));
    Mx_bits_V_3_fu_446_p3 <= 
        Mx_bits_V_1_fu_441_p2 when (p_Result_s_fu_435_p2(0) = '1') else 
        Mx_bits_V_reg_1481;
    Mx_zeros_fu_501_p1 <= tmp_s_fu_493_p3(7 - 1 downto 0);
    add_ln214_fu_330_p2 <= std_logic_vector(unsigned(din_exp_V_fu_306_p4) + unsigned(ap_const_lv11_44D));
    add_ln451_1_fu_1151_p2 <= std_logic_vector(unsigned(tmp_7_2_fu_1117_p3) + unsigned(add_ln451_fu_1130_p2));
    add_ln451_2_fu_1206_p2 <= std_logic_vector(unsigned(tmp_7_3_fu_1186_p3) + unsigned(add_ln451_1_reg_1810));
    add_ln451_fu_1130_p2 <= std_logic_vector(unsigned(tmp_7_1_fu_1099_p3) + unsigned(ap_const_lv32_10));
    add_ln461_fu_1256_p2 <= std_logic_vector(signed(sext_ln186_fu_1194_p1) + signed(ap_const_lv12_3FF));
    addr_fu_336_p3 <= 
        ap_const_lv11_4A when (closepath_fu_320_p2(0) = '1') else 
        add_ln214_fu_330_p2;
    and_ln300_2_fu_1377_p2 <= (icmp_ln1019_reg_1529_pp0_iter31_reg and icmp_ln1019_1_reg_1455_pp0_iter31_reg);
    and_ln300_fu_676_p2 <= (icmp_ln1019_fu_671_p2 and icmp_ln1019_1_reg_1455_pp0_iter8_reg);
    and_ln453_1_fu_1221_p2 <= (icmp_ln453_2_reg_1816 and icmp_ln453_1_reg_1804);
    and_ln453_2_fu_1225_p2 <= (icmp_ln453_reg_1785 and and_ln453_1_fu_1221_p2);
    and_ln453_fu_1216_p2 <= (xor_ln453_fu_1211_p2 and icmp_ln453_reg_1785);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage0_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage0_iter29 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage0_iter30 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage0_iter31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage0_iter32 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_enable_reg_pp0_iter32, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter32 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_idle_pp0 = ap_const_logic_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to31_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0))) then 
            ap_idle_pp0_0to31 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to31 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to31)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to31 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= p_Result_18_fu_1409_p4;
    closepath_fu_320_p2 <= "1" when (unsigned(din_exp_V_fu_306_p4) < unsigned(ap_const_lv11_3FE)) else "0";
    data_V_fu_294_p1 <= t_in;
    din_exp_V_fu_306_p4 <= data_V_fu_294_p1(62 downto 52);
    din_sig_V_fu_316_p1 <= data_V_fu_294_p1(52 - 1 downto 0);
    empty_fu_1285_p1 <= newexp_fu_1266_p2(11 - 1 downto 0);
    fourth_order_double_sin_cos_K0_V_address0 <= zext_ln541_reg_1572_pp0_iter18_reg(8 - 1 downto 0);

    fourth_order_double_sin_cos_K0_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter19, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            fourth_order_double_sin_cos_K0_V_ce0 <= ap_const_logic_1;
        else 
            fourth_order_double_sin_cos_K0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fourth_order_double_sin_cos_K1_V_address0 <= zext_ln541_fu_784_p1(8 - 1 downto 0);

    fourth_order_double_sin_cos_K1_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter14, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            fourth_order_double_sin_cos_K1_V_ce0 <= ap_const_logic_1;
        else 
            fourth_order_double_sin_cos_K1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fourth_order_double_sin_cos_K2_V_address0 <= zext_ln541_fu_784_p1(8 - 1 downto 0);

    fourth_order_double_sin_cos_K2_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter14, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            fourth_order_double_sin_cos_K2_V_ce0 <= ap_const_logic_1;
        else 
            fourth_order_double_sin_cos_K2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fourth_order_double_sin_cos_K3_V_address0 <= zext_ln541_reg_1572_pp0_iter18_reg(8 - 1 downto 0);

    fourth_order_double_sin_cos_K3_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter19, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            fourth_order_double_sin_cos_K3_V_ce0 <= ap_const_logic_1;
        else 
            fourth_order_double_sin_cos_K3_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fourth_order_double_sin_cos_K4_V_address0 <= zext_ln541_reg_1572_pp0_iter18_reg(8 - 1 downto 0);

    fourth_order_double_sin_cos_K4_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter19, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            fourth_order_double_sin_cos_K4_V_ce0 <= ap_const_logic_1;
        else 
            fourth_order_double_sin_cos_K4_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_398_p1 <= grp_fu_398_p10(53 - 1 downto 0);
    grp_fu_398_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_13_fu_387_p3),170));
    grp_fu_772_p0 <= zext_ln1271_fu_769_p1(49 - 1 downto 0);
    grp_fu_772_p1 <= zext_ln1271_fu_769_p1(49 - 1 downto 0);
    grp_fu_803_p0 <= zext_ln818_fu_800_p1(49 - 1 downto 0);
    grp_fu_803_p1 <= zext_ln1271_reg_1565_pp0_iter15_reg(49 - 1 downto 0);
    grp_fu_808_p0 <= zext_ln818_fu_800_p1(49 - 1 downto 0);
    grp_fu_808_p1 <= zext_ln818_fu_800_p1(49 - 1 downto 0);
    grp_fu_820_p0 <= grp_fu_820_p00(56 - 1 downto 0);
    grp_fu_820_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_V_reg_1555_pp0_iter15_reg),108));
    grp_fu_832_p0 <= grp_fu_832_p00(49 - 1 downto 0);
    grp_fu_832_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_squared_V_reg_1589),93));
    grp_fu_891_p0 <= grp_fu_891_p00(42 - 1 downto 0);
    grp_fu_891_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln1_reg_1662),75));
    grp_fu_891_p1 <= grp_fu_891_p10(33 - 1 downto 0);
    grp_fu_891_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fourth_order_double_sin_cos_K3_V_load_reg_1667),75));
    grp_fu_903_p0 <= grp_fu_903_p00(35 - 1 downto 0);
    grp_fu_903_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln1270_1_reg_1672),60));
    grp_fu_903_p1 <= grp_fu_903_p10(25 - 1 downto 0);
    grp_fu_903_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fourth_order_double_sin_cos_K4_V_load_reg_1677),60));
    grp_fu_980_p1 <= grp_fu_980_p10(63 - 1 downto 0);
    grp_fu_980_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_V_2_reg_1717),126));
    icmp_ln1019_1_fu_363_p2 <= "1" when (din_sig_V_fu_316_p1 = ap_const_lv52_0) else "0";
    icmp_ln1019_2_fu_681_p2 <= "1" when (din_exp_V_reg_1426_pp0_iter8_reg = ap_const_lv11_7FF) else "0";
    icmp_ln1019_fu_671_p2 <= "1" when (din_exp_V_reg_1426_pp0_iter8_reg = ap_const_lv11_0) else "0";
    icmp_ln1653_fu_1070_p2 <= "1" when (result_V_reg_1737 = ap_const_lv63_0) else "0";
    icmp_ln453_1_fu_1145_p2 <= "1" when (tmp_7_1_fu_1099_p3 = ap_const_lv32_10) else "0";
    icmp_ln453_2_fu_1157_p2 <= "1" when (tmp_7_2_fu_1117_p3 = ap_const_lv32_10) else "0";
    icmp_ln453_fu_1125_p2 <= "1" when (tmp_7_reg_1763 = ap_const_lv32_10) else "0";
    k_V_1_fu_517_p3 <= 
        ap_const_lv3_0 when (closepath_reg_1433_pp0_iter8_reg(0) = '1') else 
        k_V_reg_1487_pp0_iter8_reg;
    newexp_fu_1266_p2 <= std_logic_vector(signed(sext_ln461_fu_1262_p1) - signed(select_ln453_2_fu_1248_p3));
    or_ln300_fu_686_p2 <= (icmp_ln1019_2_fu_681_p2 or and_ln300_fu_676_p2);
    or_ln453_fu_1237_p2 <= (and_ln453_fu_1216_p2 or and_ln453_2_fu_1225_p2);
    or_ln462_fu_1280_p2 <= (tmp_13_fu_1272_p3 or icmp_ln1653_reg_1775_pp0_iter30_reg);
    p_Result_12_fu_326_p1 <= data_V_fu_294_p1(52 - 1 downto 0);
    p_Result_13_fu_387_p3 <= (ap_const_lv1_1 & p_Result_12_reg_1440_pp0_iter2_reg);
    p_Result_14_fu_463_p3 <= (tmp_1_fu_453_p4 & ap_const_lv1_1);
    p_Result_15_fu_481_p3 <= (ap_const_lv1_1 & p_Result_2_fu_471_p4);
    p_Result_16_fu_778_p3 <= (sin_basis_reg_1522_pp0_iter13_reg & tmp_2_reg_1550_pp0_iter13_reg);
    p_Result_17_fu_580_p3 <= (p_Result_11_reg_1421_pp0_iter8_reg & k_V_1_fu_517_p3);
    p_Result_18_fu_1409_p4 <= ((results_sign_V_1_reg_1545_pp0_iter31_reg & results_exp_V_reg_1847) & results_sig_V_fu_1402_p3);
    
    p_Result_1_fu_1043_p4_proc : process(p_Result_9_fu_1036_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_1_fu_1043_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := p_Result_9_fu_1036_p3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_1_fu_1043_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_1_fu_1043_p4_i) := p_Result_9_fu_1036_p3(32-1-p_Result_1_fu_1043_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_1_fu_1043_p4 <= resvalue(32-1 downto 0);
    end process;

    
    p_Result_2_fu_471_p4_proc : process(p_Result_14_fu_463_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(62+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(62+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(62 - 1 downto 0);
    variable p_Result_2_fu_471_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(62 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(62 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(62 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3D(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := p_Result_14_fu_463_p3;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(62-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(62-1-unsigned(ap_const_lv32_3D(6-1 downto 0)));
            for p_Result_2_fu_471_p4_i in 0 to 62-1 loop
                v0_cpy(p_Result_2_fu_471_p4_i) := p_Result_14_fu_463_p3(62-1-p_Result_2_fu_471_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(62-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_2_fu_471_p4 <= resvalue(62-1 downto 0);
    end process;

    
    p_Result_34_1_fu_1089_p4_proc : process(p_Result_9_1_fu_1075_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_34_1_fu_1089_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := p_Result_9_1_fu_1075_p3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_34_1_fu_1089_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_34_1_fu_1089_p4_i) := p_Result_9_1_fu_1075_p3(32-1-p_Result_34_1_fu_1089_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_34_1_fu_1089_p4 <= resvalue(32-1 downto 0);
    end process;

    
    p_Result_34_2_fu_1107_p4_proc : process(p_Result_9_2_fu_1082_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_34_2_fu_1107_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := p_Result_9_2_fu_1082_p3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_34_2_fu_1107_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_34_2_fu_1107_p4_i) := p_Result_9_2_fu_1082_p3(32-1-p_Result_34_2_fu_1107_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_34_2_fu_1107_p4 <= resvalue(32-1 downto 0);
    end process;

    
    p_Result_34_3_fu_1176_p4_proc : process(p_Result_6_fu_1169_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_34_3_fu_1176_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := p_Result_6_fu_1169_p3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_34_3_fu_1176_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_34_3_fu_1176_p4_i) := p_Result_6_fu_1169_p3(32-1-p_Result_34_3_fu_1176_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_34_3_fu_1176_p4 <= resvalue(32-1 downto 0);
    end process;

    p_Result_6_fu_1169_p3 <= (tmp_5_reg_1758_pp0_iter30_reg & ap_const_lv17_10000);
    p_Result_9_1_fu_1075_p3 <= (p_Result_31_1_reg_1748_pp0_iter29_reg & ap_const_lv16_8000);
    p_Result_9_2_fu_1082_p3 <= (p_Result_31_2_reg_1753_pp0_iter29_reg & ap_const_lv16_8000);
    p_Result_9_fu_1036_p3 <= (p_Result_s_43_reg_1743 & ap_const_lv16_8000);
    p_Result_s_fu_435_p2 <= (xor_ln1027_fu_430_p2 and tmp_4_fu_423_p3);
    r_V_15_fu_372_p2 <= std_logic_vector(shift_left(unsigned(table_256_V_reg_1461),to_integer(unsigned('0' & zext_ln930_fu_369_p1(31-1 downto 0)))));
    r_V_16_fu_738_p3 <= 
        r_V_fu_728_p2 when (isNeg_reg_1516(0) = '1') else 
        r_V_2_fu_733_p2;
    r_V_2_fu_733_p2 <= std_logic_vector(shift_left(unsigned(Mx_V_reg_1503),to_integer(unsigned('0' & zext_ln1488_fu_724_p1(31-1 downto 0)))));
    r_V_fu_728_p2 <= std_logic_vector(shift_right(unsigned(Mx_V_reg_1503),to_integer(unsigned('0' & zext_ln1488_fu_724_p1(31-1 downto 0)))));
    r_fu_529_p2 <= std_logic_vector(shift_left(unsigned(Mx_bits_V_3_reg_1492),to_integer(unsigned('0' & zext_ln1454_fu_526_p1(31-1 downto 0)))));
    ref_4oPi_table_256_V_address0 <= zext_ln668_fu_354_p1(4 - 1 downto 0);

    ref_4oPi_table_256_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            ref_4oPi_table_256_V_ce0 <= ap_const_logic_1;
        else 
            ref_4oPi_table_256_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    results_exp_V_fu_1304_p3 <= 
        select_ln300_fu_1289_p3 when (or_ln300_reg_1539_pp0_iter30_reg(0) = '1') else 
        select_ln300_1_fu_1296_p3;
    results_sig_V_fu_1402_p3 <= 
        select_ln300_4_fu_1387_p3 when (or_ln300_reg_1539_pp0_iter31_reg(0) = '1') else 
        select_ln300_3_fu_1395_p3;
    results_sign_V_1_fu_698_p2 <= (xor_ln300_fu_692_p2 and results_sign_V_fu_663_p3);
    results_sign_V_fu_663_p3 <= 
        tmp_8_fu_587_p18 when (sin_basis_fu_558_p10(0) = '1') else 
        tmp_9_fu_625_p18;
    ret_V_6_fu_916_p2 <= std_logic_vector(signed(sext_ln813_fu_909_p1) + signed(sext_ln813_1_fu_913_p1));
    ret_V_7_fu_925_p2 <= std_logic_vector(unsigned(ret_V_6_fu_916_p2) + unsigned(sext_ln1347_fu_922_p1));
    ret_V_8_fu_960_p2 <= std_logic_vector(unsigned(ret_V_7_reg_1702_pp0_iter22_reg) + unsigned(zext_ln1347_fu_957_p1));
    ret_V_fu_968_p2 <= std_logic_vector(unsigned(ret_V_8_fu_960_p2) + unsigned(zext_ln1347_1_fu_965_p1));
    select_ln300_1_fu_1296_p3 <= 
        ap_const_lv11_0 when (or_ln462_fu_1280_p2(0) = '1') else 
        empty_fu_1285_p1;
    select_ln300_3_fu_1395_p3 <= 
        ap_const_lv52_0 when (or_ln462_reg_1842(0) = '1') else 
        select_ln453_5_fu_1370_p3;
    select_ln300_4_fu_1387_p3 <= 
        ap_const_lv52_FFFFFFFFFFFFF when (xor_ln300_1_fu_1381_p2(0) = '1') else 
        ap_const_lv52_0;
    select_ln300_fu_1289_p3 <= 
        ap_const_lv11_3FF when (and_ln300_reg_1534_pp0_iter30_reg(0) = '1') else 
        ap_const_lv11_7FF;
    select_ln453_1_fu_1243_p3 <= 
        add_ln451_1_reg_1810 when (icmp_ln453_reg_1785(0) = '1') else 
        tmp_7_reg_1763_pp0_iter30_reg;
    select_ln453_2_fu_1248_p3 <= 
        select_ln453_fu_1230_p3 when (or_ln453_fu_1237_p2(0) = '1') else 
        select_ln453_1_fu_1243_p3;
    select_ln453_3_fu_1338_p3 <= 
        tmp_3_fu_1319_p4 when (and_ln453_2_reg_1832(0) = '1') else 
        tmp_6_fu_1329_p4;
    select_ln453_4_fu_1363_p3 <= 
        tmp_10_fu_1345_p4 when (icmp_ln453_reg_1785_pp0_iter31_reg(0) = '1') else 
        tmp_11_fu_1354_p4;
    select_ln453_5_fu_1370_p3 <= 
        select_ln453_3_fu_1338_p3 when (or_ln453_reg_1837(0) = '1') else 
        select_ln453_4_fu_1363_p3;
    select_ln453_fu_1230_p3 <= 
        add_ln451_2_fu_1206_p2 when (and_ln453_2_fu_1225_p2(0) = '1') else 
        add_ln451_reg_1793;
    select_ln482_fu_510_p3 <= 
        Ex_V_fu_505_p2 when (closepath_reg_1433_pp0_iter8_reg(0) = '1') else 
        ap_const_lv11_0;
        sext_ln1204_fu_489_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Result_15_fu_481_p3),64));

        sext_ln1347_fu_922_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_2_reg_1657),64));

        sext_ln1488_fu_720_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_713_p3),32));

        sext_ln1535_fu_704_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(Ex_V_3_reg_1510),12));

        sext_ln186_fu_1194_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(Ex_V_4_fu_1163_p3),12));

        sext_ln461_fu_1262_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln461_fu_1256_p2),32));

        sext_ln813_1_fu_913_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_1_reg_1652),64));

        sext_ln813_fu_909_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(t1_V_fu_878_p3),64));

    shl_ln1454_1_fu_1140_p2 <= std_logic_vector(shift_left(unsigned(shl_ln1454_reg_1769),to_integer(unsigned('0' & zext_ln1488_2_fu_1136_p1(31-1 downto 0)))));
    shl_ln1454_2_fu_1201_p2 <= std_logic_vector(shift_left(unsigned(shl_ln1454_1_reg_1798),to_integer(unsigned('0' & zext_ln1488_3_fu_1198_p1(31-1 downto 0)))));
    shl_ln1454_3_fu_1314_p2 <= std_logic_vector(shift_left(unsigned(shl_ln1454_2_reg_1826),to_integer(unsigned('0' & zext_ln1488_4_fu_1311_p1(31-1 downto 0)))));
    shl_ln1454_fu_1065_p2 <= std_logic_vector(shift_left(unsigned(result_V_reg_1737),to_integer(unsigned('0' & zext_ln1488_1_fu_1061_p1(31-1 downto 0)))));
    sub_ln1512_fu_707_p2 <= std_logic_vector(unsigned(ap_const_lv12_0) - unsigned(sext_ln1535_fu_704_p1));
    t1_V_fu_878_p3 <= (fourth_order_double_sin_cos_K0_V_load_reg_1647 & ap_const_lv4_0);
    tmp_10_fu_1345_p4 <= shl_ln1454_2_reg_1826(61 downto 10);
    tmp_11_fu_1354_p4 <= shl_ln1454_reg_1769_pp0_iter31_reg(61 downto 10);
    tmp_13_fu_1272_p3 <= newexp_fu_1266_p2(31 downto 31);
    tmp_1_fu_453_p4 <= Mx_bits_V_3_fu_446_p3(123 downto 63);
    tmp_3_fu_1319_p4 <= shl_ln1454_3_fu_1314_p2(61 downto 10);
    tmp_4_fu_423_p3 <= ret_V_5_reg_1476(167 downto 167);
    tmp_6_fu_1329_p4 <= shl_ln1454_1_reg_1798_pp0_iter31_reg(61 downto 10);
    
    tmp_7_1_fu_1099_p3_proc : process(p_Result_34_1_fu_1089_p4)
    begin
        tmp_7_1_fu_1099_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_34_1_fu_1089_p4(i) = '1' then
                tmp_7_1_fu_1099_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    
    tmp_7_2_fu_1117_p3_proc : process(p_Result_34_2_fu_1107_p4)
    begin
        tmp_7_2_fu_1117_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_34_2_fu_1107_p4(i) = '1' then
                tmp_7_2_fu_1117_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    
    tmp_7_3_fu_1186_p3_proc : process(p_Result_34_3_fu_1176_p4)
    begin
        tmp_7_3_fu_1186_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_34_3_fu_1176_p4(i) = '1' then
                tmp_7_3_fu_1186_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    
    tmp_7_fu_1053_p3_proc : process(p_Result_1_fu_1043_p4)
    begin
        tmp_7_fu_1053_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_1_fu_1043_p4(i) = '1' then
                tmp_7_fu_1053_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    tmp_fu_344_p4 <= addr_fu_336_p3(10 downto 7);
    
    tmp_s_fu_493_p3_proc : process(sext_ln1204_fu_489_p1)
    begin
        tmp_s_fu_493_p3 <= std_logic_vector(to_unsigned(64, 64));
        for i in 0 to 64 - 1 loop
            if sext_ln1204_fu_489_p1(i) = '1' then
                tmp_s_fu_493_p3 <= std_logic_vector(to_unsigned(i,64));
                exit;
            end if;
        end loop;
    end process;

    trunc_ln628_fu_359_p1 <= addr_fu_336_p3(7 - 1 downto 0);
    ush_fu_713_p3 <= 
        sub_ln1512_fu_707_p2 when (isNeg_reg_1516(0) = '1') else 
        sext_ln1535_fu_704_p1;
    xor_ln1027_fu_430_p2 <= (closepath_reg_1433_pp0_iter7_reg xor ap_const_lv1_1);
    xor_ln300_1_fu_1381_p2 <= (ap_const_lv1_1 xor and_ln300_2_fu_1377_p2);
    xor_ln300_fu_692_p2 <= (or_ln300_fu_686_p2 xor ap_const_lv1_1);
    xor_ln453_fu_1211_p2 <= (icmp_ln453_1_reg_1804 xor ap_const_lv1_1);
    zext_ln1271_fu_769_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_trunc_reg_1560),98));
    zext_ln1347_1_fu_965_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rhs_4_reg_1707),64));
    zext_ln1347_fu_957_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln2_reg_1712),64));
    zext_ln1454_fu_526_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_zeros_reg_1497),124));
    zext_ln1488_1_fu_1061_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_1053_p3),63));
    zext_ln1488_2_fu_1136_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_1_fu_1099_p3),63));
    zext_ln1488_3_fu_1198_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_2_reg_1780),63));
    zext_ln1488_4_fu_1311_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_3_reg_1821),63));
    zext_ln1488_fu_724_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1488_fu_720_p1),63));
    zext_ln541_fu_784_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_16_fu_778_p3),64));
    zext_ln668_fu_354_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_344_p4),64));
    zext_ln818_fu_800_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_squared_V_reg_1589),98));
    zext_ln841_fu_523_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_zeros_reg_1497),11));
    zext_ln930_fu_369_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln628_reg_1450_pp0_iter1_reg),256));
end behav;
